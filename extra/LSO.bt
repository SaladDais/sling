//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: LSO.bt
//   Authors: Salad Dais
//   Version: 0.1
//   Purpose: Dissector for V1 and V2 LSO bytecode for LSL.
//  Category:
// File Mask: *.lso
//  ID Bytes: 00 00 40 00 00 00 00 00 00 00
//   History:
//------------------------------------------------


BigEndian();


typedef enum <uchar> {
    LST_NULL,
	LST_INTEGER,
	LST_FLOATINGPOINT,
	LST_STRING,
	LST_KEY,
	LST_VECTOR,
	LST_QUATERNION,
	LST_LIST,
	LST_UNDEFINED,
	LST_EOF
} LSCRIPTType;

typedef struct {
    // swapped because that's how LSO has them.
    LSCRIPTType right : 4;
    LSCRIPTType left : 4;
} LSCRIPTPackedTypes <read=(Str("%s, %s", EnumToString(this.left), EnumToString(this.right)))>;


typedef enum {
    LSTT_NULL,
	LSTT_STATE_ENTRY,
	LSTT_STATE_EXIT,
	LSTT_TOUCH_START,
	LSTT_TOUCH,
	LSTT_TOUCH_END,
	LSTT_COLLISION_START,
	LSTT_COLLISION,
	LSTT_COLLISION_END,
	LSTT_LAND_COLLISION_START,
	LSTT_LAND_COLLISION,
	LSTT_LAND_COLLISION_END,
	LSTT_TIMER,
	LSTT_CHAT,
	LSTT_REZ,
	LSTT_SENSOR,
	LSTT_NO_SENSOR,
	LSTT_CONTROL,
	LSTT_MONEY,
	LSTT_EMAIL,
	LSTT_AT_TARGET,
	LSTT_NOT_AT_TARGET,
	LSTT_AT_ROT_TARGET,
	LSTT_NOT_AT_ROT_TARGET,
	LSTT_RTPERMISSIONS,
	LSTT_INVENTORY,
	LSTT_ATTACH,
	LSTT_DATASERVER,
	LSTT_LINK_MESSAGE,
	LSTT_MOVING_START,
	LSTT_MOVING_END,
	LSTT_OBJECT_REZ,
	LSTT_REMOTE_DATA,
	LSTT_HTTP_RESPONSE,
	LSTT_HTTP_REQUEST,
	LSTT_EOF
} LSCRIPTStateEventType;

typedef enum <ubyte> {
	LOPC_NOOP = 0x00,
	LOPC_POP = 0x01,
	LOPC_POPS = 0x02,
	LOPC_POPL = 0x03,
	LOPC_POPV = 0x04,
	LOPC_POPQ = 0x05,
	LOPC_POPARG = 0x06,
	LOPC_POPIP = 0x07,
	LOPC_POPBP = 0x08,
	LOPC_POPSP = 0x09,
	LOPC_POPSLR = 0x0a,
	LOPC_DUP = 0x20,
	LOPC_DUPS = 0x21,
	LOPC_DUPL = 0x22,
	LOPC_DUPV = 0x23,
	LOPC_DUPQ = 0x24,
	LOPC_STORE = 0x30,
	LOPC_STORES = 0x31,
	LOPC_STOREL = 0x32,
	LOPC_STOREV = 0x33,
	LOPC_STOREQ = 0x34,
	LOPC_STOREG = 0x35,
	LOPC_STOREGS = 0x36,
	LOPC_STOREGL = 0x37,
	LOPC_STOREGV = 0x38,
	LOPC_STOREGQ = 0x39,
	LOPC_LOADP = 0x3a,
	LOPC_LOADSP = 0x3b,
	LOPC_LOADLP = 0x3c,
	LOPC_LOADVP = 0x3d,
	LOPC_LOADQP = 0x3e,
	LOPC_LOADGP = 0x3f,
	LOPC_LOADGSP = 0x40,
	LOPC_LOADGLP = 0x41,
	LOPC_LOADGVP = 0x42,
	LOPC_LOADGQP = 0x43,
	LOPC_PUSH = 0x50,
	LOPC_PUSHS = 0x51,
	LOPC_PUSHL = 0x52,
	LOPC_PUSHV = 0x53,
	LOPC_PUSHQ = 0x54,
	LOPC_PUSHG = 0x55,
	LOPC_PUSHGS = 0x56,
	LOPC_PUSHGL = 0x57,
	LOPC_PUSHGV = 0x58,
	LOPC_PUSHGQ = 0x59,
	LOPC_PUSHIP = 0x5a,
	LOPC_PUSHBP = 0x5b,
	LOPC_PUSHSP = 0x5c,
	LOPC_PUSHARGB = 0x5d,
	LOPC_PUSHARGI = 0x5e,
	LOPC_PUSHARGF = 0x5f,
	LOPC_PUSHARGS = 0x60,
	LOPC_PUSHARGV = 0x61,
	LOPC_PUSHARGQ = 0x62,
	LOPC_PUSHE = 0x63,
	LOPC_PUSHEV = 0x64,
	LOPC_PUSHEQ = 0x65,
	LOPC_PUSHARGE = 0x66,
	LOPC_ADD = 0x70,
	LOPC_SUB = 0x71,
	LOPC_MUL = 0x72,
	LOPC_DIV = 0x73,
	LOPC_MOD = 0x74,
	LOPC_EQ = 0x75,
	LOPC_NEQ = 0x76,
	LOPC_LEQ = 0x77,
	LOPC_GEQ = 0x78,
	LOPC_LESS = 0x79,
	LOPC_GREATER = 0x7a,
	LOPC_BITAND = 0x7b,
	LOPC_BITOR = 0x7c,
	LOPC_BITXOR = 0x7d,
	LOPC_BOOLAND = 0x7e,
	LOPC_BOOLOR = 0x7f,
	LOPC_NEG = 0x80,
	LOPC_BITNOT = 0x81,
	LOPC_BOOLNOT = 0x82,
	LOPC_JUMP = 0x90,
	LOPC_JUMPIF = 0x91,
	LOPC_JUMPNIF = 0x92,
	LOPC_STATE = 0x93,
	LOPC_CALL = 0x94,
	LOPC_RETURN = 0x95,
	LOPC_CAST = 0xa0,
	LOPC_STACKTOS = 0xb0,
	LOPC_STACKTOL = 0xb1,
	LOPC_PRINT = 0xc0,
	LOPC_CALLLIB = 0xd0,
	LOPC_CALLLIB_TWO_BYTE = 0xd1,
	LOPC_SHL = 0xe0,
	LOPC_SHR = 0xe1
} LScriptOpCode;


// stupid hack, don't really have a dynamic list structure in 010 so we have to pre-allocate.
local uint64 num_bytecode_start_ptrs = 0;
local uint64 num_bytecode_end_ptrs = 0;
local uint64 bytecode_start_ptrs[0xFFFF];
local uint64 bytecode_end_ptrs[0xFFFF];

typedef struct LSO2Registers {
    uint32 TM <comment="top of memory">;
    uint32 IP <comment="instruction pointer">;
    uint32 VN <comment="version number">;
    uint32 BP <comment="base pointer - what local variables are referenced from">;
    uint32 SP <comment="stack pointer - where the top of the stack is">;
    uint32 HR <comment="heap register - where in memory does the heap start">;
    uint32 HP <comment="heap pointer - where to write the next heap entry">;
    uint32 CS <comment="current state">;
    uint32 NS <comment="next state - what state are we switching to?">;
    // CE IE and ER are NOT used in version 2 bytecode.
    // repopulated whenever state is switched as they related to the _state_.
    uint32 CE <comment="current events - what events are waiting to be handled?", format=hex>;
    uint32 IE <comment="in event - which event handler are we currently in?">;
    uint32 ER <comment="event register - what events do we have active handlers for?", format=hex>;
    uint32 FR <comment="fault register - which errors are currently active?", format=hex>;
    uint32 SLR <comment="sleep register - are we sleeping? For how long?">;
    uint32 GVR <comment="global variable register - where do global variables start">;
    uint32 GFR <comment="global function register - where do global functions start">;
    uint32 PR <comment="parameter register - data passed to script from launcher">;
    uint32 ESR <comment="energy supply register - how much energy do we have on board?">;
    uint32 SR <comment="state register - where do state details start">;
    // only exist in version 2 bytecode
    uint64 NCE <comment="64 bit current events - what events are waiting to be handled?", format=hex>;
    uint64 NIE <comment="64 bit in event - which event handler are we currently in?">;
    uint64 NER <comment="64 bit event register - what events do we have active handlers for?", format=hex>;
};

typedef struct {
    float z;
    float y;
    float x;
} Vector3 <read=(Str("%.3f, %.3f, %.3f", this.x, this.y, this.z))>;

typedef struct {
    float s;
    float z;
    float y;
    float x;
} Quaternion <read=(Str("%.3f, %.3f, %.3f, %.3f", this.x, this.y, this.z, this.s))>;

typedef struct {
    uint32 data_offset <comment="offset to data relative to this field">;
    LSCRIPTType type;
    string name <comment="Null-terminated var name (debug-only)">;
    switch(type) {
        case LST_STRING:
        case LST_KEY:
        case LST_LIST:
            // As in a pointer to the very first heap block's byte is "1", not "0"!
            uint32 heap_ptr <comment="Heap location relative to HR register minus one">;
            break;
        case LST_INTEGER:
            uint32 i_val;
            break;
        case LST_FLOATINGPOINT:
            float f_val;
            break;
        case LST_VECTOR:
            Vector3 v_val;
            break;
        case LST_QUATERNION:
            Quaternion q_val;
            break;
        default:
    }
} LSOGlobalVariable <read=(Str("%d, %s, %s", this.data_offset, EnumToString(this.type), this.name))>;

typedef struct {
    int32 size;
    LSCRIPTType type;
    // shouldn't be anything other than 1 when initially defined
    int16 reference_count;
    switch(type) {
        case LST_STRING:
        case LST_KEY:
            // Must be null-terminated even with the explicit size.
            char s_val[size];
            break;
        case LST_INTEGER:
            uint32 i_val;
            break;
        case LST_FLOATINGPOINT:
            float f_val;
            break;
        case LST_VECTOR:
            Vector3 v_val;
            break;
        case LST_QUATERNION:
            Quaternion q_val;
            break;
        case LST_LIST:
            struct {
                int32 len;
                int32 heap_entries[len] <comment="Heap-relative pointers to elements' heap blocks">;
            } l_val <read=(Str("%d entries", this.len))>;
            break;
        default:
    }
} LSOHeapEntry <read=(Str("%d, %s, %d", this.size, EnumToString(this.type), this.reference_count))>;





// Start actually parsing the bytecode
LSO2Registers registers <bgcolor=cLtBlue>;

typedef struct LSOStateTableEntry {
    uint32 state_offset <comment="SR-relative offset to data about the state">;
    // thisi s the only real difference between v1 and v2 bytecode.
    if (registers.VN == 0x0200) {
        uint64 handled_events <comment="Bitfield of event types this state has handlers for", format=hex>;
    } else {
        uint32 handled_events <comment="Bitfield of event types this state has handlers for", format=hex>;
    }
};

FSeek(registers.GVR);
while (FTell() < registers.GFR) {
    LSOGlobalVariable var <bgcolor=cLtRed>;
}


// There may not even _be_ any global functions if the state register
// is equal to or lower than the global functions register.
if (registers.GFR < registers.SR) {
    FSeek(registers.GFR);
    uint32 num_funcs <bgcolor=cLtYellow>;
    uint32 func_jump_table[num_funcs] <comment="Offsets for given function numbers", bgcolor=cLtYellow>;

    local int func_num;
    for(func_num=0; func_num<num_funcs; ++func_num) {
        FSeek(registers.GFR + func_jump_table[func_num]);
        // The start of a new function could be the terminator for another
        bytecode_end_ptrs[num_bytecode_end_ptrs++] = FTell();
        struct {
            uint32 code_offset <comment="Offset to bytecode from this field">;
            bytecode_start_ptrs[num_bytecode_start_ptrs++] = FTell() + code_offset - sizeof(code_offset);
            string name;
            LSCRIPTType ret_type;
            // null-terminated list of parameter types
            while(ReadByte()) {
                LSCRIPTType param;
            }
            LSCRIPTType param_terminator <comment="Indicates no more parameters">;
            // opcodes start here, but no length field.
            // It's assumed something will force a ret
            // so we can't fall off the end of one function
            // and into the header of another
        } global_func <bgcolor=cLtYellow>;
    }
}

// The start of SR is definitely a terminator
bytecode_end_ptrs[num_bytecode_end_ptrs++] = registers.SR;

FSeek(registers.SR);
uint32 num_states <bgcolor=cLtPurple>;
LSOStateTableEntry states_table[num_states] <bgcolor=cLtPurple, optimize=false>;

local int state_num;
local uint64 handlers;
local uint32 handler_to_try;
local uint32 handler_num;
local uint64 params_start;
local uint64 params_end;
local uchar have_debug_info = false;
local uint32 handler_to_check;

for(state_num=0; state_num<num_states; ++state_num) {
    FSeek(registers.SR + states_table[state_num].state_offset);
    handlers = states_table[state_num].handled_events;
    struct {
        uint32 jump_table_offset <comment="State-relative offset to event handler jump table">;
        string state_name;
        // if state name is defined that means we should sniff for handler debug info.
        // otherwise it'll be completely missing and we'll mis-parse the header!
        if (sizeof(state_name) > 1)
            have_debug_info = true;

        // should be a no-op and == FTell() in most cases, but let's be sure.
        local uint64 jump_table_start = startof(jump_table_offset) + jump_table_offset;
        FSeek(jump_table_start);

        // only event handlers that are actually defined get a place in the
        // jump table, and their entries must be in the same order as the enum.
        // the order of the code blocks themselves is in order of their appearance
        // in the code.
        for(handler_to_try=LSTT_STATE_ENTRY; handler_to_try<LSTT_EOF; ++handler_to_try) {
            // this handler isn't defined, try the next one in the bitfield.
            if (!(handlers & (1L << (handler_to_try - 1))))
                continue;
            struct {
                uint32 jump_offset <comment="offset of actual event handler from the first handler_header">;
                uint32 stack_required <comment="stack space required for this handler's arguments">;
            } handler_jumps;
        }

        // The code for the event handlers follows the jump table
        handler_num = 0;
        for(handler_to_try=LSTT_STATE_ENTRY; handler_to_try<LSTT_EOF; ++handler_to_try) {
            if (!(handlers & (1L << (handler_to_try - 1))))
                continue;
            // use the jump table to seek to the event handler data
            FSeek(jump_table_start + handler_jumps[handler_num].jump_offset);
            // The start of a new handler is probably a terminator for one that came before it
            bytecode_end_ptrs[num_bytecode_end_ptrs++] = FTell();
            struct {
                uint32 code_offset <comment="Offset to first bytecode relative to this field">;
                bytecode_start_ptrs[num_bytecode_start_ptrs++] = FTell() + code_offset - sizeof(code_offset);
                string event_name;

                if (have_debug_info) {
                    params_start = FTell();

                    // there may be a list of null-separated parameter names for debug
                    while(ReadByte()) {
                        FSeek(FTell() + 1);
                        if (!ReadByte())
                            FSeek(FTell() + 1);
                    }
                    params_end = FTell();
                    FSeek(params_start);
                    // including final null terminator
                    char params_debug[params_end - params_start + 1];
                }

            } handler_data;
            ++handler_num;
        }
    } state <bgcolor=cLtPurple>;
}


FSeek(registers.HR);


// The start of the heap is definitely a bytecode terminator.
bytecode_end_ptrs[num_bytecode_end_ptrs++] = FTell();

while (FTell() < registers.HP) {
    LSOHeapEntry block <bgcolor=cLtGreen>;
}



typedef struct {
    LScriptOpCode opcode;
    switch (opcode) {
        case LOPC_NOOP:
        case LOPC_POP:
        case LOPC_POPS:
        case LOPC_POPL:
        case LOPC_POPV:
        case LOPC_POPQ:
            // no operand
            break;
        case LOPC_POPARG:
            LSCRIPTType type;
            break;
        case LOPC_POPIP:
        case LOPC_POPBP:
        case LOPC_POPSP:
        case LOPC_POPSLR:
        case LOPC_DUP:
        case LOPC_DUPS:
        case LOPC_DUPL:
        case LOPC_DUPV:
        case LOPC_DUPQ:
            // no operand
            break;
        case LOPC_STORE:
        case LOPC_STORES:
        case LOPC_STOREL:
        case LOPC_STOREV:
        case LOPC_STOREQ:
            int32 local_offset;
            break;
        case LOPC_STOREG:
        case LOPC_STOREGS:
        case LOPC_STOREGL:
        case LOPC_STOREGV:
        case LOPC_STOREGQ:
            uint32 global_offset;
            break;
        case LOPC_LOADP:
        case LOPC_LOADSP:
        case LOPC_LOADLP:
        case LOPC_LOADVP:
        case LOPC_LOADQP:
            int32 local_offset;
            break;
        case LOPC_LOADGP:
        case LOPC_LOADGSP:
        case LOPC_LOADGLP:
        case LOPC_LOADGVP:
        case LOPC_LOADGQP:
            uint32 global_offset;
            break;
        case LOPC_PUSH:
        case LOPC_PUSHS:
        case LOPC_PUSHL:
        case LOPC_PUSHV:
        case LOPC_PUSHQ:
            int32 local_offset;
            break;
        case LOPC_PUSHG:
        case LOPC_PUSHGS:
        case LOPC_PUSHGL:
        case LOPC_PUSHGV:
        case LOPC_PUSHGQ:
            uint32 global_offset;
            break;
        case LOPC_PUSHIP:
        case LOPC_PUSHBP:
        case LOPC_PUSHSP:
            // no operands
            break;
        case LOPC_PUSHARGB:
            // usually a type argument
            LSCRIPTType byte_arg;
            break;
        case LOPC_PUSHARGI:
            int32 int_arg;
            break;
        case LOPC_PUSHARGF:
            float float_arg;
            break;
        case LOPC_PUSHARGS:
            string str_arg;
            break;
        case LOPC_PUSHARGV:
            Vector3 v_arg;
            break;
        case LOPC_PUSHARGQ:
            Quaternion q_arg;
            break;
        // ???
        case LOPC_PUSHE:
        case LOPC_PUSHEV:
        case LOPC_PUSHEQ:
            break;
        case LOPC_PUSHARGE:
            int32 arg;
            break;
        case LOPC_ADD:
        case LOPC_SUB:
        case LOPC_MUL:
        case LOPC_DIV:
        case LOPC_MOD:
        case LOPC_EQ:
        case LOPC_NEQ:
        case LOPC_LEQ:
        case LOPC_GEQ:
        case LOPC_LESS:
        case LOPC_GREATER:
            LSCRIPTPackedTypes packed_types;
            break;
        case LOPC_BITAND:
        case LOPC_BITOR:
        case LOPC_BITXOR:
        case LOPC_BITNOT:
        case LOPC_BOOLAND:
        case LOPC_BOOLOR:
        case LOPC_BOOLAND:
        case LOPC_SHL:
        case LOPC_SHR:
            // only int, no type args
            break;
        case LOPC_NEG:
            LSCRIPTType type;
            break;
        case LOPC_JUMP:
            int32 offset;
            break;
        case LOPC_JUMPIF:
        case LOPC_JUMPNIF:
            LSCRIPTType type;
            int32 offset;
            break;
        case LOPC_STATE:
            uint32 state_idx;
            break;
        case LOPC_CALL:
            uint32 func_idx;
            break;
        case LOPC_RETURN:
            // no operand, ret should already be on stack.
            break;
        case LOPC_CAST:
            LSCRIPTPackedTypes packed_types;
            break;
        case LOPC_STACKTOL:
        case LOPC_STACKTOS:
            int32 stack_offset; // maybe?
            break;
        case LOPC_PRINT:
            LSCRIPTType type;
            break;
        case LOPC_CALLLIB:
            ubyte lib_idx;
            break;
        case LOPC_CALLLIB_TWO_BYTE:
            uint16 lib_idx;
            break;

    }
} LSOInstruction<optimize=false, read=(EnumToString(opcode))>;


local uint64 terminate_pos;
// Now go back and dissect the opcodes from sections we saw before
void DissectOpCodes(uint64 start_pos) {
    local uint64 cur_bytecode_end_idx;
    terminate_pos = 0xFFffFFff;
    local uint64 cand_terminate_pos;
    for(cur_bytecode_end_idx=0; cur_bytecode_end_idx<num_bytecode_end_ptrs; ++cur_bytecode_end_idx) {
        cand_terminate_pos = bytecode_end_ptrs[cur_bytecode_end_idx];
        // smaller than the last ending we picked but bigger than the start
        if (cand_terminate_pos < terminate_pos && cand_terminate_pos > start_pos)
            terminate_pos = cand_terminate_pos;
    }
    FSeek(start_pos);
    struct {
        while(FTell() < terminate_pos) {
            LSOInstruction instruction;
        }
    } code_block <bgcolor=cLtAqua>;
}

local uint64 cur_bytecode_start_idx;
for(cur_bytecode_start_idx=0; cur_bytecode_start_idx<num_bytecode_start_ptrs; ++cur_bytecode_start_idx) {
    DissectOpCodes(bytecode_start_ptrs[cur_bytecode_start_idx]);
}
