name: build

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
    paths-ignore:
      - '*.md'
  workflow_dispatch:

jobs:
  unix:
    strategy:
      matrix:
#        os: [ubuntu, macos]
        os: [ubuntu]
        compiler: [clang++]
        # Ubuntu uses GCC which doesn't support coverage, and we want to compile with both GCC and Clang.
        include:
          - os: ubuntu
            compiler: g++
          - os: ubuntu
            compiler: clang++
            extra_compile_flags: "-DTAILSLIDE_COVERAGE=ON"
            check_coverage: true
#          - os: macos
#            boostrap_command: true
    name: ${{matrix.os}} - ${{matrix.compiler}}
    runs-on: ${{matrix.os}}-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install Dependencies
        if: ${{matrix.boostrap_command}}
        run: |
          bash bootstrap_${{matrix.os}}.sh
      - name: make test
        run: |
          mkdir build
          pushd build
          CXX=${{matrix.compiler}} cmake .. -DTAILSLIDE_SANITIZE=ON ${{matrix.extra_compile_flags}}
          make -j2
          popd
          mkdir coverage
          ./build/tailslide-test

      - name: Merge coverage data
        if: ${{matrix.check_coverage}}
        run: |
          llvm-profdata-11 merge default.profraw -o default.profdata
          llvm-cov-11 report -ignore-filename-regex=\(tests\|extern\)/.* -show-region-summary=false --instr-profile default.profdata build/tailslide-test
          llvm-cov-11 export -ignore-filename-regex=\(tests\|extern\)/.* -format lcov --instr-profile default.profdata build/tailslide-test > coverage.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        if: ${{matrix.check_coverage}}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info
          directory: ./coverage/reports/
          name: codecov-umbrella
          fail_ci_if_error: false
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: false
