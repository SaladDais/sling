script [none] (cv=) (11,1)
  ast node list [none] (cv=) (11,1)
    global storage [none] (cv=) (11,1)
      global var [none] (cv=) (11,1)
        identifier "llSetText_text" [string] (cv=string constant: "") (11,8)
        constant expression [string] (cv=string constant: "") (11,29)
          string constant: "" [string] (cv=string constant: "") (11,29)
      null [none] (cv=) (11,1)
    global storage [none] (cv=) (12,1)
      global var [none] (cv=) (12,1)
        identifier "llSetText_color" [vector] (cv=vector constant: <1, 1, 1>) (12,8)
        vector expression [vector] (cv=vector constant: <1, 1, 1>) (12,29)
          constant expression [float] (cv=float constant: 1.000000) (12,30)
            float constant: 1.000000 [float] (cv=float constant: 1.000000) (12,30)
          constant expression [float] (cv=float constant: 1.000000) (12,34)
            float constant: 1.000000 [float] (cv=float constant: 1.000000) (12,34)
          constant expression [float] (cv=float constant: 1.000000) (12,38)
            float constant: 1.000000 [float] (cv=float constant: 1.000000) (12,38)
      null [none] (cv=) (12,1)
    global storage [none] (cv=) (13,1)
      global var [none] (cv=) (13,1)
        identifier "llSetText_alpha" [float] (cv=float constant: 1.000000) (13,8)
        constant expression [float] (cv=float constant: 1.000000) (13,29)
          float constant: 1.000000 [float] (cv=float constant: 1.000000) (13,29)
      null [none] (cv=) (13,1)
    global storage [none] (cv=) (15,1)
      global var [none] (cv=) (15,1)
        identifier "llTargetOmega_axis" [vector] (cv=vector constant: <0, 0, 0>) (15,8)
        lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (15,35)
          identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (15,35)
      null [none] (cv=) (15,1)
    global storage [none] (cv=) (16,1)
      global var [none] (cv=) (16,1)
        identifier "llTargetOmega_spinrate" [float] (cv=float constant: 0.000000) (16,8)
        constant expression [float] (cv=float constant: 0.000000) (16,35)
          float constant: 0.000000 [float] (cv=float constant: 0.000000) (16,35)
      null [none] (cv=) (16,1)
    global storage [none] (cv=) (17,1)
      global var [none] (cv=) (17,1)
        identifier "llTargetOmega_gain" [float] (cv=float constant: 0.000000) (17,8)
        constant expression [float] (cv=float constant: 0.000000) (17,35)
          float constant: 0.000000 [float] (cv=float constant: 0.000000) (17,35)
      null [none] (cv=) (17,1)
    global storage [none] (cv=) (27,1)
      global var [none] (cv=) (27,1)
        identifier "llSetTextureAnim_mode" [integer] (cv=integer constant: 0) (27,9)
        constant expression [integer] (cv=integer constant: 0) (27,33)
          integer constant: 0 [integer] (cv=integer constant: 0) (27,33)
      null [none] (cv=) (27,1)
    global storage [none] (cv=) (28,1)
      global var [none] (cv=) (28,1)
        identifier "llSetTextureAnim_face" [integer] (cv=integer constant: -1) (28,9)
        lvalue expression {foldable} [integer] (cv=integer constant: -1) (28,33)
          identifier "ALL_SIDES" [integer] (cv=integer constant: -1) (28,33)
      null [none] (cv=) (28,1)
    global storage [none] (cv=) (29,1)
      global var [none] (cv=) (29,1)
        identifier "llSetTextureAnim_x_frames" [integer] (cv=integer constant: 2) (29,9)
        constant expression [integer] (cv=integer constant: 2) (29,37)
          integer constant: 2 [integer] (cv=integer constant: 2) (29,37)
      null [none] (cv=) (29,1)
    global storage [none] (cv=) (30,1)
      global var [none] (cv=) (30,1)
        identifier "llSetTextureAnim_y_frames" [integer] (cv=integer constant: 2) (30,9)
        constant expression [integer] (cv=integer constant: 2) (30,37)
          integer constant: 2 [integer] (cv=integer constant: 2) (30,37)
      null [none] (cv=) (30,1)
    global storage [none] (cv=) (31,1)
      global var [none] (cv=) (31,1)
        identifier "llSetTextureAnim_start_frame" [float] (cv=integer constant: 0) (31,8)
        constant expression [integer] (cv=integer constant: 0) (31,39)
          integer constant: 0 [integer] (cv=integer constant: 0) (31,39)
      null [none] (cv=) (31,1)
    global storage [none] (cv=) (32,1)
      global var [none] (cv=) (32,1)
        identifier "llSetTextureAnim_end_frame" [float] (cv=integer constant: 3) (32,8)
        constant expression [integer] (cv=integer constant: 3) (32,37)
          integer constant: 3 [integer] (cv=integer constant: 3) (32,37)
      null [none] (cv=) (32,1)
    global storage [none] (cv=) (33,1)
      global var [none] (cv=) (33,1)
        identifier "llSetTextureAnim_rate" [float] (cv=float constant: 0.100000) (33,9)
        constant expression [float] (cv=float constant: 0.100000) (33,33)
          float constant: 0.100000 [float] (cv=float constant: 0.100000) (33,33)
      null [none] (cv=) (33,1)
    global storage [none] (cv=) (35,1)
      global var [none] (cv=) (35,1)
        identifier "llParticleSystem_list" [list] (cv=list constant: 0 entries) (35,6)
        list expression [list] (cv=list constant: 0 entries) (35,35)
          null [none] (cv=) (35,35)
      null [none] (cv=) (35,1)
    global storage [none] (cv=) (37,1)
      global var [none] (cv=) (37,1)
        identifier "TLML_URL" [string] (cv=string constant: "url") (37,8)
        constant expression [string] (cv=string constant: "url") (37,35)
          string constant: "url" [string] (cv=string constant: "url") (37,35)
      null [none] (cv=) (37,1)
    global storage [none] (cv=) (55,1)
      null [none] (cv=) (55,1)
      global func [none] (cv=) (55,1)
        identifier "byte2hex" [string] (cv=) (55,8)
        function decl [none] (cv=) (55,17)
          identifier "x" [integer] (cv=) (55,25)
        compound statement [none] (cv=) (56,1)
          declaration [none] (cv=) (57,5)
            identifier "x0" [integer] (cv=) (57,13)
            parenthesis expression [integer] (cv=) (57,19)
              binary expression: '&' [integer] (cv=) (57,20)
                lvalue expression {foldable} [integer] (cv=) (57,20)
                  identifier "x" [integer] (cv=) (57,20)
                constant expression [integer] (cv=integer constant: 15) (57,24)
                  integer constant: 15 [integer] (cv=integer constant: 15) (57,24)
          return [none] (cv=) (58,5)
            binary expression: '+' [string] (cv=) (58,12)
              function call [string] (cv=) (58,12)
                identifier "llGetSubString" [string] (cv=) (58,12)
                lvalue expression {foldable} [string] (cv=string constant: "0123456789ABCDEF") (58,27)
                  identifier "hexc" [string] (cv=string constant: "0123456789ABCDEF") (58,27)
                binary expression: '=' [integer] (cv=) (58,33)
                  lvalue expression {foldable} [integer] (cv=) (58,33)
                    identifier "x0" [integer] (cv=) (58,33)
                  parenthesis expression [integer] (cv=) (58,38)
                    binary expression: '&' [integer] (cv=) (58,39)
                      parenthesis expression [integer] (cv=) (58,39)
                        binary expression: '>>' [integer] (cv=) (58,40)
                          lvalue expression {foldable} [integer] (cv=) (58,40)
                            identifier "x" [integer] (cv=) (58,40)
                          constant expression [integer] (cv=integer constant: 4) (58,45)
                            integer constant: 4 [integer] (cv=integer constant: 4) (58,45)
                      constant expression [integer] (cv=integer constant: 15) (58,50)
                        integer constant: 15 [integer] (cv=integer constant: 15) (58,50)
                lvalue expression {foldable} [integer] (cv=) (58,56)
                  identifier "x0" [integer] (cv=) (58,56)
              function call [string] (cv=) (58,62)
                identifier "llGetSubString" [string] (cv=) (58,62)
                lvalue expression {foldable} [string] (cv=string constant: "0123456789ABCDEF") (58,77)
                  identifier "hexc" [string] (cv=string constant: "0123456789ABCDEF") (58,77)
                lvalue expression {foldable} [integer] (cv=) (58,83)
                  identifier "x0" [integer] (cv=) (58,83)
                lvalue expression {foldable} [integer] (cv=) (58,87)
                  identifier "x0" [integer] (cv=) (58,87)
    global storage [none] (cv=) (61,1)
      null [none] (cv=) (61,1)
      global func [none] (cv=) (61,1)
        identifier "Unescape" [string] (cv=) (61,8)
        function decl [none] (cv=) (61,17)
          identifier "a" [string] (cv=) (61,24)
        compound statement [none] (cv=) (62,1)
          declaration [none] (cv=) (63,5)
            identifier "b" [string] (cv=) (63,13)
            lvalue expression {foldable} [string] (cv=) (63,17)
              identifier "a" [string] (cv=) (63,17)
          declaration [none] (cv=) (64,5)
            identifier "c" [integer] (cv=) (64,13)
            constant expression [integer] (cv=integer constant: -1) (64,17)
              integer constant: -1 [integer] (cv=integer constant: -1) (64,17)
          declaration [none] (cv=) (65,5)
            identifier "d" [integer] (cv=) (65,13)
            null [none] (cv=) (65,5)
          declaration [none] (cv=) (66,5)
            identifier "e" [integer] (cv=) (66,13)
            null [none] (cv=) (66,5)
          declaration [none] (cv=) (67,5)
            identifier "f" [integer] (cv=) (67,13)
            constant expression [integer] (cv=integer constant: 0) (67,17)
              integer constant: 0 [integer] (cv=integer constant: 0) (67,17)
          declaration [none] (cv=) (68,5)
            identifier "g" [string] (cv=) (68,12)
            null [none] (cv=) (68,5)
          while [none] (cv=) (69,5)
            binary expression: '=' [integer] (cv=) (69,11)
              lvalue expression {foldable} [integer] (cv=) (69,11)
                identifier "d" [integer] (cv=) (69,11)
              binary expression: '+' [integer] (cv=) (69,15)
                function call [integer] (cv=) (69,15)
                  identifier "llSubStringIndex" [integer] (cv=) (69,15)
                  lvalue expression {foldable} [string] (cv=) (69,32)
                    identifier "b" [string] (cv=) (69,32)
                  constant expression [string] (cv=string constant: "\\") (69,35)
                    string constant: "\\" [string] (cv=string constant: "\\") (69,35)
                constant expression [integer] (cv=integer constant: 1) (69,43)
                  integer constant: 1 [integer] (cv=integer constant: 1) (69,43)
            compound statement [none] (cv=) (70,5)
              statement [none] (cv=) (71,9)
                binary expression: '=' [string] (cv=) (71,9)
                  lvalue expression {foldable} [string] (cv=) (71,9)
                    identifier "g" [string] (cv=) (71,9)
                  function call [string] (cv=) (71,13)
                    identifier "llGetSubString" [string] (cv=) (71,13)
                    lvalue expression {foldable} [string] (cv=) (71,28)
                      identifier "b" [string] (cv=) (71,28)
                    lvalue expression {foldable} [integer] (cv=) (71,30)
                      identifier "d" [integer] (cv=) (71,30)
                    lvalue expression {foldable} [integer] (cv=) (71,32)
                      identifier "d" [integer] (cv=) (71,32)
              statement [none] (cv=) (72,9)
                binary expression: '+=' [integer] (cv=) (72,9)
                  lvalue expression {foldable} [integer] (cv=) (72,9)
                    identifier "c" [integer] (cv=) (72,9)
                  lvalue expression {foldable} [integer] (cv=) (72,14)
                    identifier "d" [integer] (cv=) (72,14)
              if [none] (cv=) (74,9)
                binary expression: '||' [integer] (cv=) (74,12)
                  parenthesis expression [integer] (cv=) (74,12)
                    binary expression: '==' [integer] (cv=) (74,13)
                      lvalue expression {foldable} [string] (cv=) (74,13)
                        identifier "g" [string] (cv=) (74,13)
                      constant expression [string] (cv=string constant: "\"") (74,18)
                        string constant: "\"" [string] (cv=string constant: "\"") (74,18)
                  parenthesis expression [integer] (cv=) (74,27)
                    binary expression: '==' [integer] (cv=) (74,28)
                      lvalue expression {foldable} [string] (cv=) (74,28)
                        identifier "g" [string] (cv=) (74,28)
                      constant expression [string] (cv=string constant: "\\") (74,33)
                        string constant: "\\" [string] (cv=string constant: "\\") (74,33)
                statement [none] (cv=) (75,13)
                  binary expression: '=' [string] (cv=) (75,13)
                    lvalue expression {foldable} [string] (cv=) (75,13)
                      identifier "a" [string] (cv=) (75,13)
                    function call [string] (cv=) (75,17)
                      identifier "llDeleteSubString" [string] (cv=) (75,17)
                      lvalue expression {foldable} [string] (cv=) (75,35)
                        identifier "a" [string] (cv=) (75,35)
                      lvalue expression {foldable} [integer] (cv=) (75,37)
                        identifier "c" [integer] (cv=) (75,37)
                      lvalue expression {foldable} [integer] (cv=) (75,39)
                        identifier "c" [integer] (cv=) (75,39)
                if [none] (cv=) (76,14)
                  binary expression: '==' [integer] (cv=) (76,17)
                    lvalue expression {foldable} [string] (cv=) (76,17)
                      identifier "g" [string] (cv=) (76,17)
                    constant expression [string] (cv=string constant: "n") (76,22)
                      string constant: "n" [string] (cv=string constant: "n") (76,22)
                  statement [none] (cv=) (77,13)
                    binary expression: '=' [string] (cv=) (77,13)
                      lvalue expression {foldable} [string] (cv=) (77,13)
                        identifier "a" [string] (cv=) (77,13)
                      function call [string] (cv=) (77,17)
                        identifier "llInsertString" [string] (cv=) (77,17)
                        function call [string] (cv=) (77,32)
                          identifier "llDeleteSubString" [string] (cv=) (77,32)
                          lvalue expression {foldable} [string] (cv=) (77,50)
                            identifier "a" [string] (cv=) (77,50)
                          lvalue expression {foldable} [integer] (cv=) (77,52)
                            identifier "c" [integer] (cv=) (77,52)
                          binary expression: '+' [integer] (cv=) (77,54)
                            lvalue expression {foldable} [integer] (cv=) (77,54)
                              identifier "c" [integer] (cv=) (77,54)
                            constant expression [integer] (cv=integer constant: 1) (77,56)
                              integer constant: 1 [integer] (cv=integer constant: 1) (77,56)
                        lvalue expression {foldable} [integer] (cv=) (77,60)
                          identifier "c" [integer] (cv=) (77,60)
                        constant expression [string] (cv=string constant: "\n") (77,63)
                          string constant: "\n" [string] (cv=string constant: "\n") (77,63)
                  if [none] (cv=) (78,14)
                    binary expression: '==' [integer] (cv=) (78,17)
                      lvalue expression {foldable} [string] (cv=) (78,17)
                        identifier "g" [string] (cv=) (78,17)
                      constant expression [string] (cv=string constant: "t") (78,22)
                        string constant: "t" [string] (cv=string constant: "t") (78,22)
                    statement [none] (cv=) (79,13)
                      binary expression: '=' [string] (cv=) (79,13)
                        lvalue expression {foldable} [string] (cv=) (79,13)
                          identifier "a" [string] (cv=) (79,13)
                        function call [string] (cv=) (79,17)
                          identifier "llInsertString" [string] (cv=) (79,17)
                          function call [string] (cv=) (79,32)
                            identifier "llDeleteSubString" [string] (cv=) (79,32)
                            lvalue expression {foldable} [string] (cv=) (79,50)
                              identifier "a" [string] (cv=) (79,50)
                            lvalue expression {foldable} [integer] (cv=) (79,52)
                              identifier "c" [integer] (cv=) (79,52)
                            binary expression: '+' [integer] (cv=) (79,54)
                              lvalue expression {foldable} [integer] (cv=) (79,54)
                                identifier "c" [integer] (cv=) (79,54)
                              constant expression [integer] (cv=integer constant: 1) (79,56)
                                integer constant: 1 [integer] (cv=integer constant: 1) (79,56)
                          lvalue expression {foldable} [integer] (cv=) (79,60)
                            identifier "c" [integer] (cv=) (79,60)
                          constant expression [string] (cv=string constant: "    ") (79,63)
                            string constant: "    " [string] (cv=string constant: "    ") (79,63)
                    if [none] (cv=) (80,14)
                      binary expression: '==' [integer] (cv=) (80,17)
                        lvalue expression {foldable} [string] (cv=) (80,17)
                          identifier "g" [string] (cv=) (80,17)
                        constant expression [string] (cv=string constant: "r") (80,22)
                          string constant: "r" [string] (cv=string constant: "r") (80,22)
                      compound statement [none] (cv=) (81,9)
                        statement [none] (cv=) (82,13)
                          binary expression: '=' [string] (cv=) (82,13)
                            lvalue expression {foldable} [string] (cv=) (82,13)
                              identifier "g" [string] (cv=) (82,13)
                            constant expression [string] (cv=string constant: "") (82,17)
                              string constant: "" [string] (cv=string constant: "") (82,17)
                        if [none] (cv=) (83,13)
                          binary expression: '>=' [integer] (cv=) (83,16)
                            binary expression: '+' [integer] (cv=) (83,16)
                              binary expression: '+' [integer] (cv=) (83,16)
                                lvalue expression {foldable} [integer] (cv=) (83,16)
                                  identifier "d" [integer] (cv=) (83,16)
                                parenthesis expression [integer] (cv=) (83,18)
                                  binary expression: '=' [integer] (cv=) (83,19)
                                    lvalue expression {foldable} [integer] (cv=) (83,19)
                                      identifier "e" [integer] (cv=) (83,19)
                                    binary expression: '*' [integer] (cv=) (83,23)
                                      typecast expression [integer] (cv=) (83,23)
                                        binary expression: '+' [string] (cv=) (83,33)
                                          constant expression [string] (cv=string constant: "0x") (83,33)
                                            string constant: "0x" [string] (cv=string constant: "0x") (83,33)
                                          function call [string] (cv=) (83,38)
                                            identifier "llGetSubString" [string] (cv=) (83,38)
                                            lvalue expression {foldable} [string] (cv=) (83,53)
                                              identifier "b" [string] (cv=) (83,53)
                                            binary expression: '+' [integer] (cv=) (83,55)
                                              lvalue expression {foldable} [integer] (cv=) (83,55)
                                                identifier "d" [integer] (cv=) (83,55)
                                              constant expression [integer] (cv=integer constant: 1) (83,57)
                                                integer constant: 1 [integer] (cv=integer constant: 1) (83,57)
                                            binary expression: '+' [integer] (cv=) (83,59)
                                              lvalue expression {foldable} [integer] (cv=) (83,59)
                                                identifier "d" [integer] (cv=) (83,59)
                                              constant expression [integer] (cv=integer constant: 1) (83,61)
                                                integer constant: 1 [integer] (cv=integer constant: 1) (83,61)
                                      constant expression [integer] (cv=integer constant: 2) (83,67)
                                        integer constant: 2 [integer] (cv=integer constant: 2) (83,67)
                              constant expression [integer] (cv=integer constant: 1) (83,70)
                                integer constant: 1 [integer] (cv=integer constant: 1) (83,70)
                            parenthesis expression [integer] (cv=) (83,75)
                              binary expression: '=' [integer] (cv=) (83,76)
                                lvalue expression {foldable} [integer] (cv=) (83,76)
                                  identifier "f" [integer] (cv=) (83,76)
                                function call [integer] (cv=) (83,80)
                                  identifier "llStringLength" [integer] (cv=) (83,80)
                                  lvalue expression {foldable} [string] (cv=) (83,95)
                                    identifier "b" [string] (cv=) (83,95)
                          statement [none] (cv=) (84,17)
                            binary expression: '=' [integer] (cv=) (84,17)
                              lvalue expression {foldable} [integer] (cv=) (84,17)
                                identifier "e" [integer] (cv=) (84,17)
                              binary expression: '&' [integer] (cv=) (84,21)
                                parenthesis expression [integer] (cv=) (84,21)
                                  binary expression: '-' [integer] (cv=) (84,22)
                                    binary expression: '-' [integer] (cv=) (84,22)
                                      lvalue expression {foldable} [integer] (cv=) (84,22)
                                        identifier "f" [integer] (cv=) (84,22)
                                      lvalue expression {foldable} [integer] (cv=) (84,26)
                                        identifier "d" [integer] (cv=) (84,26)
                                    constant expression [integer] (cv=integer constant: 2) (84,30)
                                      integer constant: 2 [integer] (cv=integer constant: 2) (84,30)
                                constant expression [integer] (cv=integer constant: -2) (84,35)
                                  integer constant: -2 [integer] (cv=integer constant: -2) (84,35)
                          null [none] (cv=) (83,13)
                        if [none] (cv=) (85,13)
                          binary expression: '=' [integer] (cv=) (85,16)
                            lvalue expression {foldable} [integer] (cv=) (85,16)
                              identifier "f" [integer] (cv=) (85,16)
                            lvalue expression {foldable} [integer] (cv=) (85,20)
                              identifier "e" [integer] (cv=) (85,20)
                          compound statement [none] (cv=) (86,13)
                            do [none] (cv=) (87,17)
                              statement [none] (cv=) (88,21)
                                binary expression: '=' [string] (cv=) (88,21)
                                  lvalue expression {foldable} [string] (cv=) (88,21)
                                    identifier "g" [string] (cv=) (88,21)
                                  binary expression: '+' [string] (cv=) (88,25)
                                    binary expression: '+' [string] (cv=) (88,25)
                                      constant expression [string] (cv=string constant: "%") (88,25)
                                        string constant: "%" [string] (cv=string constant: "%") (88,25)
                                      function call [string] (cv=) (88,29)
                                        identifier "llGetSubString" [string] (cv=) (88,29)
                                        lvalue expression {foldable} [string] (cv=) (88,44)
                                          identifier "b" [string] (cv=) (88,44)
                                        binary expression: '+' [integer] (cv=) (88,46)
                                          lvalue expression {foldable} [integer] (cv=) (88,46)
                                            identifier "d" [integer] (cv=) (88,46)
                                          lvalue expression {foldable} [integer] (cv=) (88,50)
                                            identifier "e" [integer] (cv=) (88,50)
                                        binary expression: '+' [integer] (cv=) (88,52)
                                          binary expression: '+' [integer] (cv=) (88,52)
                                            lvalue expression {foldable} [integer] (cv=) (88,52)
                                              identifier "d" [integer] (cv=) (88,52)
                                            lvalue expression {foldable} [integer] (cv=) (88,56)
                                              identifier "e" [integer] (cv=) (88,56)
                                          constant expression [integer] (cv=integer constant: 1) (88,60)
                                            integer constant: 1 [integer] (cv=integer constant: 1) (88,60)
                                    lvalue expression {foldable} [string] (cv=) (88,65)
                                      identifier "g" [string] (cv=) (88,65)
                              binary expression: '>' [integer] (cv=) (89,23)
                                parenthesis expression [integer] (cv=) (89,23)
                                  binary expression: '-=' [integer] (cv=) (89,24)
                                    lvalue expression {foldable} [integer] (cv=) (89,24)
                                      identifier "e" [integer] (cv=) (89,24)
                                    constant expression [integer] (cv=integer constant: 2) (89,27)
                                      integer constant: 2 [integer] (cv=integer constant: 2) (89,27)
                                constant expression [integer] (cv=integer constant: 0) (89,32)
                                  integer constant: 0 [integer] (cv=integer constant: 0) (89,32)
                          null [none] (cv=) (85,13)
                        statement [none] (cv=) (91,13)
                          binary expression: '=' [string] (cv=) (91,13)
                            lvalue expression {foldable} [string] (cv=) (91,13)
                              identifier "a" [string] (cv=) (91,13)
                            function call [string] (cv=) (91,17)
                              identifier "llInsertString" [string] (cv=) (91,17)
                              function call [string] (cv=) (91,32)
                                identifier "llDeleteSubString" [string] (cv=) (91,32)
                                lvalue expression {foldable} [string] (cv=) (91,50)
                                  identifier "a" [string] (cv=) (91,50)
                                lvalue expression {foldable} [integer] (cv=) (91,52)
                                  identifier "c" [integer] (cv=) (91,52)
                                binary expression: '+' [integer] (cv=) (91,55)
                                  binary expression: '+' [integer] (cv=) (91,55)
                                    lvalue expression {foldable} [integer] (cv=) (91,55)
                                      identifier "c" [integer] (cv=) (91,55)
                                    constant expression [integer] (cv=integer constant: 2) (91,59)
                                      integer constant: 2 [integer] (cv=integer constant: 2) (91,59)
                                  lvalue expression {foldable} [integer] (cv=) (91,63)
                                    identifier "f" [integer] (cv=) (91,63)
                              lvalue expression {foldable} [integer] (cv=) (91,66)
                                identifier "c" [integer] (cv=) (91,66)
                              binary expression: '=' [string] (cv=) (91,69)
                                lvalue expression {foldable} [string] (cv=) (91,69)
                                  identifier "g" [string] (cv=) (91,69)
                                function call [string] (cv=) (91,73)
                                  identifier "llUnescapeURL" [string] (cv=) (91,73)
                                  lvalue expression {foldable} [string] (cv=) (91,87)
                                    identifier "g" [string] (cv=) (91,87)
                        statement [none] (cv=) (92,13)
                          binary expression: '+=' [integer] (cv=) (92,13)
                            lvalue expression {foldable} [integer] (cv=) (92,13)
                              identifier "c" [integer] (cv=) (92,13)
                            function call [integer] (cv=) (92,18)
                              identifier "llStringLength" [integer] (cv=) (92,18)
                              lvalue expression {foldable} [string] (cv=) (92,33)
                                identifier "g" [string] (cv=) (92,33)
                      if [none] (cv=) (94,14)
                        binary expression: '||' [integer] (cv=) (94,17)
                          binary expression: '==' [integer] (cv=) (94,17)
                            lvalue expression {foldable} [string] (cv=) (94,17)
                              identifier "g" [string] (cv=) (94,17)
                            constant expression [string] (cv=string constant: "u") (94,22)
                              string constant: "u" [string] (cv=string constant: "u") (94,22)
                          parenthesis expression [integer] (cv=) (94,29)
                            binary expression: '=' [integer] (cv=) (94,30)
                              lvalue expression {foldable} [integer] (cv=) (94,30)
                                identifier "e" [integer] (cv=) (94,30)
                              parenthesis expression [integer] (cv=) (94,34)
                                binary expression: '==' [integer] (cv=) (94,35)
                                  lvalue expression {foldable} [string] (cv=) (94,35)
                                    identifier "g" [string] (cv=) (94,35)
                                  constant expression [string] (cv=string constant: "U") (94,40)
                                    string constant: "U" [string] (cv=string constant: "U") (94,40)
                        compound statement [none] (cv=) (95,9)
                          statement [none] (cv=) (96,13)
                            binary expression: '=' [string] (cv=) (96,13)
                              lvalue expression {foldable} [string] (cv=) (96,13)
                                identifier "a" [string] (cv=) (96,13)
                              function call [string] (cv=) (96,17)
                                identifier "llDeleteSubString" [string] (cv=) (96,17)
                                lvalue expression {foldable} [string] (cv=) (96,35)
                                  identifier "a" [string] (cv=) (96,35)
                                lvalue expression {foldable} [integer] (cv=) (96,38)
                                  identifier "c" [integer] (cv=) (96,38)
                                binary expression: '+' [integer] (cv=) (96,41)
                                  binary expression: '+' [integer] (cv=) (96,41)
                                    lvalue expression {foldable} [integer] (cv=) (96,41)
                                      identifier "c" [integer] (cv=) (96,41)
                                    constant expression [integer] (cv=integer constant: 5) (96,45)
                                      integer constant: 5 [integer] (cv=integer constant: 5) (96,45)
                                  binary expression: '*=' [integer] (cv=) (96,49)
                                    lvalue expression {foldable} [integer] (cv=) (96,49)
                                      identifier "e" [integer] (cv=) (96,49)
                                    constant expression [integer] (cv=integer constant: 4) (96,54)
                                      integer constant: 4 [integer] (cv=integer constant: 4) (96,54)
                          if [none] (cv=) (97,13)
                            binary expression: '<' [integer] (cv=) (97,16)
                              constant expression [integer] (cv=integer constant: 0) (97,16)
                                integer constant: 0 [integer] (cv=integer constant: 0) (97,16)
                              binary expression: '=' [integer] (cv=) (97,20)
                                lvalue expression {foldable} [integer] (cv=) (97,20)
                                  identifier "e" [integer] (cv=) (97,20)
                                typecast expression [integer] (cv=) (97,24)
                                  binary expression: '+' [string] (cv=) (97,34)
                                    constant expression [string] (cv=string constant: "0x") (97,34)
                                      string constant: "0x" [string] (cv=string constant: "0x") (97,34)
                                    function call [string] (cv=) (97,39)
                                      identifier "llGetSubString" [string] (cv=) (97,39)
                                      lvalue expression {foldable} [string] (cv=) (97,54)
                                        identifier "b" [string] (cv=) (97,54)
                                      binary expression: '+' [integer] (cv=) (97,56)
                                        lvalue expression {foldable} [integer] (cv=) (97,56)
                                          identifier "d" [integer] (cv=) (97,56)
                                        constant expression [integer] (cv=integer constant: 1) (97,59)
                                          integer constant: 1 [integer] (cv=integer constant: 1) (97,59)
                                      binary expression: '+' [integer] (cv=) (97,62)
                                        binary expression: '+' [integer] (cv=) (97,62)
                                          lvalue expression {foldable} [integer] (cv=) (97,62)
                                            identifier "d" [integer] (cv=) (97,62)
                                          constant expression [integer] (cv=integer constant: 4) (97,65)
                                            integer constant: 4 [integer] (cv=integer constant: 4) (97,65)
                                        lvalue expression {foldable} [integer] (cv=) (97,69)
                                          identifier "e" [integer] (cv=) (97,69)
                            compound statement [none] (cv=) (98,13)
                              if [none] (cv=) (99,17)
                                binary expression: '>=' [integer] (cv=) (99,21)
                                  lvalue expression {foldable} [integer] (cv=) (99,21)
                                    identifier "e" [integer] (cv=) (99,21)
                                  constant expression [integer] (cv=integer constant: 67108864) (99,26)
                                    integer constant: 67108864 [integer] (cv=integer constant: 67108864) (99,26)
                                statement [none] (cv=) (100,21)
                                  binary expression: '=' [integer] (cv=) (100,21)
                                    lvalue expression {foldable} [integer] (cv=) (100,21)
                                      identifier "f" [integer] (cv=) (100,21)
                                    constant expression [integer] (cv=integer constant: 5) (100,25)
                                      integer constant: 5 [integer] (cv=integer constant: 5) (100,25)
                                if [none] (cv=) (101,22)
                                  binary expression: '>=' [integer] (cv=) (101,26)
                                    lvalue expression {foldable} [integer] (cv=) (101,26)
                                      identifier "e" [integer] (cv=) (101,26)
                                    constant expression [integer] (cv=integer constant: 2097152) (101,31)
                                      integer constant: 2097152 [integer] (cv=integer constant: 2097152) (101,31)
                                  statement [none] (cv=) (102,21)
                                    binary expression: '=' [integer] (cv=) (102,21)
                                      lvalue expression {foldable} [integer] (cv=) (102,21)
                                        identifier "f" [integer] (cv=) (102,21)
                                      constant expression [integer] (cv=integer constant: 4) (102,25)
                                        integer constant: 4 [integer] (cv=integer constant: 4) (102,25)
                                  if [none] (cv=) (103,22)
                                    binary expression: '>=' [integer] (cv=) (103,26)
                                      lvalue expression {foldable} [integer] (cv=) (103,26)
                                        identifier "e" [integer] (cv=) (103,26)
                                      constant expression [integer] (cv=integer constant: 65536) (103,31)
                                        integer constant: 65536 [integer] (cv=integer constant: 65536) (103,31)
                                    statement [none] (cv=) (104,21)
                                      binary expression: '=' [integer] (cv=) (104,21)
                                        lvalue expression {foldable} [integer] (cv=) (104,21)
                                          identifier "f" [integer] (cv=) (104,21)
                                        constant expression [integer] (cv=integer constant: 3) (104,25)
                                          integer constant: 3 [integer] (cv=integer constant: 3) (104,25)
                                    if [none] (cv=) (105,22)
                                      binary expression: '>=' [integer] (cv=) (105,26)
                                        lvalue expression {foldable} [integer] (cv=) (105,26)
                                          identifier "e" [integer] (cv=) (105,26)
                                        constant expression [integer] (cv=integer constant: 2048) (105,31)
                                          integer constant: 2048 [integer] (cv=integer constant: 2048) (105,31)
                                      statement [none] (cv=) (106,21)
                                        binary expression: '=' [integer] (cv=) (106,21)
                                          lvalue expression {foldable} [integer] (cv=) (106,21)
                                            identifier "f" [integer] (cv=) (106,21)
                                          constant expression [integer] (cv=integer constant: 2) (106,25)
                                            integer constant: 2 [integer] (cv=integer constant: 2) (106,25)
                                      if [none] (cv=) (107,22)
                                        binary expression: '>=' [integer] (cv=) (107,26)
                                          lvalue expression {foldable} [integer] (cv=) (107,26)
                                            identifier "e" [integer] (cv=) (107,26)
                                          constant expression [integer] (cv=integer constant: 128) (107,31)
                                            integer constant: 128 [integer] (cv=integer constant: 128) (107,31)
                                        statement [none] (cv=) (108,21)
                                          binary expression: '=' [integer] (cv=) (108,21)
                                            lvalue expression {foldable} [integer] (cv=) (108,21)
                                              identifier "f" [integer] (cv=) (108,21)
                                            constant expression [integer] (cv=integer constant: 1) (108,25)
                                              integer constant: 1 [integer] (cv=integer constant: 1) (108,25)
                                        null [none] (cv=) (107,22)
                              statement [none] (cv=) (109,17)
                                binary expression: '=' [string] (cv=) (109,17)
                                  lvalue expression {foldable} [string] (cv=) (109,17)
                                    identifier "g" [string] (cv=) (109,17)
                                  binary expression: '+' [string] (cv=) (109,21)
                                    constant expression [string] (cv=string constant: "%") (109,21)
                                      string constant: "%" [string] (cv=string constant: "%") (109,21)
                                    function call [string] (cv=) (109,27)
                                      identifier "byte2hex" [string] (cv=) (109,27)
                                      binary expression: '|' [integer] (cv=) (109,36)
                                        parenthesis expression [integer] (cv=) (109,36)
                                          binary expression: '>>' [integer] (cv=) (109,37)
                                            lvalue expression {foldable} [integer] (cv=) (109,37)
                                              identifier "e" [integer] (cv=) (109,37)
                                            parenthesis expression [integer] (cv=) (109,42)
                                              binary expression: '*' [integer] (cv=) (109,43)
                                                constant expression [integer] (cv=integer constant: 6) (109,43)
                                                  integer constant: 6 [integer] (cv=integer constant: 6) (109,43)
                                                lvalue expression {foldable} [integer] (cv=) (109,47)
                                                  identifier "f" [integer] (cv=) (109,47)
                                        parenthesis expression [integer] (cv=) (109,53)
                                          binary expression: '*' [integer] (cv=) (109,54)
                                            parenthesis expression [integer] (cv=) (109,54)
                                              binary expression: '>>' [integer] (cv=) (109,55)
                                                constant expression [integer] (cv=integer constant: 16256) (109,55)
                                                  integer constant: 16256 [integer] (cv=integer constant: 16256) (109,55)
                                                lvalue expression {foldable} [integer] (cv=) (109,65)
                                                  identifier "f" [integer] (cv=) (109,65)
                                            parenthesis expression [integer] (cv=) (109,70)
                                              binary expression: '!=' [integer] (cv=) (109,71)
                                                constant expression [integer] (cv=integer constant: 0) (109,71)
                                                  integer constant: 0 [integer] (cv=integer constant: 0) (109,71)
                                                lvalue expression {foldable} [integer] (cv=) (109,76)
                                                  identifier "f" [integer] (cv=) (109,76)
                              while [none] (cv=) (110,17)
                                lvalue expression {foldable} [integer] (cv=) (110,23)
                                  identifier "f" [integer] (cv=) (110,23)
                                statement [none] (cv=) (111,21)
                                  binary expression: '+=' [string] (cv=) (111,21)
                                    lvalue expression {foldable} [string] (cv=) (111,21)
                                      identifier "g" [string] (cv=) (111,21)
                                    binary expression: '+' [string] (cv=) (111,26)
                                      constant expression [string] (cv=string constant: "%") (111,26)
                                        string constant: "%" [string] (cv=string constant: "%") (111,26)
                                      function call [string] (cv=) (111,32)
                                        identifier "byte2hex" [string] (cv=) (111,32)
                                        parenthesis expression [integer] (cv=) (111,41)
                                          binary expression: '&' [integer] (cv=) (111,42)
                                            parenthesis expression [integer] (cv=) (111,42)
                                              binary expression: '|' [integer] (cv=) (111,43)
                                                parenthesis expression [integer] (cv=) (111,43)
                                                  binary expression: '>>' [integer] (cv=) (111,44)
                                                    lvalue expression {foldable} [integer] (cv=) (111,44)
                                                      identifier "e" [integer] (cv=) (111,44)
                                                    parenthesis expression [integer] (cv=) (111,49)
                                                      binary expression: '*' [integer] (cv=) (111,50)
                                                        constant expression [integer] (cv=integer constant: 6) (111,50)
                                                          integer constant: 6 [integer] (cv=integer constant: 6) (111,50)
                                                        unary expression: '-- (pre)' [integer] (cv=) (111,54)
                                                          lvalue expression {foldable} [integer] (cv=) (111,56)
                                                            identifier "f" [integer] (cv=) (111,56)
                                                constant expression [integer] (cv=integer constant: 128) (111,62)
                                                  integer constant: 128 [integer] (cv=integer constant: 128) (111,62)
                                            constant expression [integer] (cv=integer constant: 191) (111,70)
                                              integer constant: 191 [integer] (cv=integer constant: 191) (111,70)
                              statement [none] (cv=) (112,17)
                                binary expression: '=' [string] (cv=) (112,17)
                                  lvalue expression {foldable} [string] (cv=) (112,17)
                                    identifier "a" [string] (cv=) (112,17)
                                  function call [string] (cv=) (112,21)
                                    identifier "llInsertString" [string] (cv=) (112,21)
                                    lvalue expression {foldable} [string] (cv=) (112,36)
                                      identifier "a" [string] (cv=) (112,36)
                                    unary expression: '++ (post)' [integer] (cv=) (112,39)
                                      lvalue expression {foldable} [integer] (cv=) (112,39)
                                        identifier "c" [integer] (cv=) (112,39)
                                    function call [string] (cv=) (112,44)
                                      identifier "llUnescapeURL" [string] (cv=) (112,44)
                                      lvalue expression {foldable} [string] (cv=) (112,58)
                                        identifier "g" [string] (cv=) (112,58)
                            null [none] (cv=) (97,13)
                        null [none] (cv=) (94,14)
              statement [none] (cv=) (115,9)
                binary expression: '=' [string] (cv=) (115,9)
                  lvalue expression {foldable} [string] (cv=) (115,9)
                    identifier "b" [string] (cv=) (115,9)
                  function call [string] (cv=) (115,13)
                    identifier "llDeleteSubString" [string] (cv=) (115,13)
                    lvalue expression {foldable} [string] (cv=) (115,31)
                      identifier "a" [string] (cv=) (115,31)
                    constant expression [integer] (cv=integer constant: 0) (115,33)
                      integer constant: 0 [integer] (cv=integer constant: 0) (115,33)
                    lvalue expression {foldable} [integer] (cv=) (115,35)
                      identifier "c" [integer] (cv=) (115,35)
          return [none] (cv=) (117,5)
            lvalue expression {foldable} [string] (cv=) (117,12)
              identifier "a" [string] (cv=) (117,12)
    global storage [none] (cv=) (120,1)
      null [none] (cv=) (120,1)
      global func [none] (cv=) (120,1)
        identifier "flo" [string] (cv=) (120,8)
        function decl [none] (cv=) (120,12)
          identifier "a" [float] (cv=) (120,18)
        compound statement [none] (cv=) (121,1)
          declaration [none] (cv=) (122,5)
            identifier "b" [string] (cv=) (122,12)
            typecast expression [string] (cv=) (122,16)
              lvalue expression {foldable} [float] (cv=) (122,24)
                identifier "a" [float] (cv=) (122,24)
          while [none] (cv=) (123,5)
            binary expression: '==' [integer] (cv=) (123,11)
              function call [string] (cv=) (123,11)
                identifier "llGetSubString" [string] (cv=) (123,11)
                lvalue expression {foldable} [string] (cv=) (123,26)
                  identifier "b" [string] (cv=) (123,26)
                constant expression [integer] (cv=integer constant: -1) (123,28)
                  integer constant: -1 [integer] (cv=integer constant: -1) (123,28)
                constant expression [integer] (cv=integer constant: -1) (123,31)
                  integer constant: -1 [integer] (cv=integer constant: -1) (123,31)
              constant expression [string] (cv=string constant: "0") (123,38)
                string constant: "0" [string] (cv=string constant: "0") (123,38)
            statement [none] (cv=) (124,9)
              binary expression: '=' [string] (cv=) (124,9)
                lvalue expression {foldable} [string] (cv=) (124,9)
                  identifier "b" [string] (cv=) (124,9)
                function call [string] (cv=) (124,11)
                  identifier "llDeleteSubString" [string] (cv=) (124,11)
                  lvalue expression {foldable} [string] (cv=) (124,29)
                    identifier "b" [string] (cv=) (124,29)
                  constant expression [integer] (cv=integer constant: -1) (124,31)
                    integer constant: -1 [integer] (cv=integer constant: -1) (124,31)
                  constant expression [integer] (cv=integer constant: -1) (124,34)
                    integer constant: -1 [integer] (cv=integer constant: -1) (124,34)
          if [none] (cv=) (125,5)
            binary expression: '==' [integer] (cv=) (125,8)
              function call [string] (cv=) (125,8)
                identifier "llGetSubString" [string] (cv=) (125,8)
                lvalue expression {foldable} [string] (cv=) (125,23)
                  identifier "b" [string] (cv=) (125,23)
                constant expression [integer] (cv=integer constant: -1) (125,25)
                  integer constant: -1 [integer] (cv=integer constant: -1) (125,25)
                constant expression [integer] (cv=integer constant: -1) (125,28)
                  integer constant: -1 [integer] (cv=integer constant: -1) (125,28)
              constant expression [string] (cv=string constant: ".") (125,35)
                string constant: "." [string] (cv=string constant: ".") (125,35)
            return [none] (cv=) (126,9)
              function call [string] (cv=) (126,16)
                identifier "llDeleteSubString" [string] (cv=) (126,16)
                lvalue expression {foldable} [string] (cv=) (126,34)
                  identifier "b" [string] (cv=) (126,34)
                constant expression [integer] (cv=integer constant: -1) (126,36)
                  integer constant: -1 [integer] (cv=integer constant: -1) (126,36)
                constant expression [integer] (cv=integer constant: -1) (126,39)
                  integer constant: -1 [integer] (cv=integer constant: -1) (126,39)
            null [none] (cv=) (125,5)
          if [none] (cv=) (127,5)
            binary expression: '==' [integer] (cv=) (127,8)
              function call [string] (cv=) (127,8)
                identifier "llGetSubString" [string] (cv=) (127,8)
                lvalue expression {foldable} [string] (cv=) (127,23)
                  identifier "b" [string] (cv=) (127,23)
                parenthesis expression [integer] (cv=) (127,25)
                  binary expression: '<' [integer] (cv=) (127,26)
                    lvalue expression {foldable} [float] (cv=) (127,26)
                      identifier "a" [float] (cv=) (127,26)
                    constant expression [integer] (cv=integer constant: 0) (127,28)
                      integer constant: 0 [integer] (cv=integer constant: 0) (127,28)
                binary expression: '+' [integer] (cv=) (127,31)
                  parenthesis expression [integer] (cv=) (127,31)
                    binary expression: '<' [integer] (cv=) (127,32)
                      lvalue expression {foldable} [float] (cv=) (127,32)
                        identifier "a" [float] (cv=) (127,32)
                      constant expression [integer] (cv=integer constant: 0) (127,34)
                        integer constant: 0 [integer] (cv=integer constant: 0) (127,34)
                  constant expression [integer] (cv=integer constant: 1) (127,37)
                    integer constant: 1 [integer] (cv=integer constant: 1) (127,37)
              constant expression [string] (cv=string constant: "0.") (127,41)
                string constant: "0." [string] (cv=string constant: "0.") (127,41)
            return [none] (cv=) (128,9)
              function call [string] (cv=) (128,16)
                identifier "llDeleteSubString" [string] (cv=) (128,16)
                lvalue expression {foldable} [string] (cv=) (128,34)
                  identifier "b" [string] (cv=) (128,34)
                parenthesis expression [integer] (cv=) (128,36)
                  binary expression: '<' [integer] (cv=) (128,37)
                    lvalue expression {foldable} [float] (cv=) (128,37)
                      identifier "a" [float] (cv=) (128,37)
                    constant expression [integer] (cv=integer constant: 0) (128,39)
                      integer constant: 0 [integer] (cv=integer constant: 0) (128,39)
                parenthesis expression [integer] (cv=) (128,42)
                  binary expression: '<' [integer] (cv=) (128,43)
                    lvalue expression {foldable} [float] (cv=) (128,43)
                      identifier "a" [float] (cv=) (128,43)
                    constant expression [integer] (cv=integer constant: 0) (128,45)
                      integer constant: 0 [integer] (cv=integer constant: 0) (128,45)
            null [none] (cv=) (127,5)
          return [none] (cv=) (129,5)
            lvalue expression {foldable} [string] (cv=) (129,12)
              identifier "b" [string] (cv=) (129,12)
    global storage [none] (cv=) (132,1)
      null [none] (cv=) (132,1)
      global func [none] (cv=) (132,1)
        identifier "vec" [string] (cv=) (132,8)
        function decl [none] (cv=) (132,12)
          identifier "a" [vector] (cv=) (132,19)
        compound statement [none] (cv=) (133,1)
          if [none] (cv=) (134,5)
            binary expression: '==' [integer] (cv=) (134,8)
              lvalue expression {foldable} [vector] (cv=) (134,8)
                identifier "a" [vector] (cv=) (134,8)
              lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (134,13)
                identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (134,13)
            return [none] (cv=) (134,26)
              constant expression [string] (cv=string constant: "") (134,33)
                string constant: "" [string] (cv=string constant: "") (134,33)
            null [none] (cv=) (134,5)
          return [none] (cv=) (135,5)
            binary expression: '+' [string] (cv=) (135,12)
              binary expression: '+' [string] (cv=) (135,12)
                binary expression: '+' [string] (cv=) (135,12)
                  binary expression: '+' [string] (cv=) (135,12)
                    binary expression: '+' [string] (cv=) (135,12)
                      binary expression: '+' [string] (cv=) (135,12)
                        constant expression [string] (cv=string constant: "<") (135,12)
                          string constant: "<" [string] (cv=string constant: "<") (135,12)
                        function call [string] (cv=) (135,16)
                          identifier "flo" [string] (cv=) (135,16)
                          lvalue expression {foldable} [float] (cv=) (135,20)
                            identifier "a" [vector] (cv=) (135,20)
                            identifier "x" [none] (cv=) (135,20)
                      constant expression [string] (cv=string constant: ",") (135,25)
                        string constant: "," [string] (cv=string constant: ",") (135,25)
                    function call [string] (cv=) (135,29)
                      identifier "flo" [string] (cv=) (135,29)
                      lvalue expression {foldable} [float] (cv=) (135,33)
                        identifier "a" [vector] (cv=) (135,33)
                        identifier "y" [none] (cv=) (135,33)
                  constant expression [string] (cv=string constant: ",") (135,38)
                    string constant: "," [string] (cv=string constant: ",") (135,38)
                function call [string] (cv=) (135,42)
                  identifier "flo" [string] (cv=) (135,42)
                  lvalue expression {foldable} [float] (cv=) (135,46)
                    identifier "a" [vector] (cv=) (135,46)
                    identifier "z" [none] (cv=) (135,46)
              constant expression [string] (cv=string constant: ">") (135,51)
                string constant: ">" [string] (cv=string constant: ">") (135,51)
    global storage [none] (cv=) (138,1)
      null [none] (cv=) (138,1)
      global func [none] (cv=) (138,1)
        identifier "rot" [string] (cv=) (138,8)
        function decl [none] (cv=) (138,12)
          identifier "a" [quaternion] (cv=) (138,21)
        compound statement [none] (cv=) (139,1)
          if [none] (cv=) (140,5)
            binary expression: '==' [integer] (cv=) (140,8)
              lvalue expression {foldable} [quaternion] (cv=) (140,8)
                identifier "a" [quaternion] (cv=) (140,8)
              lvalue expression {foldable} [quaternion] (cv=quaternion constant: <0, 0, 0, 1>) (140,13)
                identifier "ZERO_ROTATION" [quaternion] (cv=quaternion constant: <0, 0, 0, 1>) (140,13)
            return [none] (cv=) (140,28)
              constant expression [string] (cv=string constant: "") (140,35)
                string constant: "" [string] (cv=string constant: "") (140,35)
            null [none] (cv=) (140,5)
          return [none] (cv=) (141,5)
            binary expression: '+' [string] (cv=) (141,12)
              binary expression: '+' [string] (cv=) (141,12)
                binary expression: '+' [string] (cv=) (141,12)
                  binary expression: '+' [string] (cv=) (141,12)
                    binary expression: '+' [string] (cv=) (141,12)
                      binary expression: '+' [string] (cv=) (141,12)
                        binary expression: '+' [string] (cv=) (141,12)
                          binary expression: '+' [string] (cv=) (141,12)
                            constant expression [string] (cv=string constant: "<") (141,12)
                              string constant: "<" [string] (cv=string constant: "<") (141,12)
                            function call [string] (cv=) (141,16)
                              identifier "flo" [string] (cv=) (141,16)
                              lvalue expression {foldable} [float] (cv=) (141,20)
                                identifier "a" [quaternion] (cv=) (141,20)
                                identifier "x" [none] (cv=) (141,20)
                          constant expression [string] (cv=string constant: ",") (141,25)
                            string constant: "," [string] (cv=string constant: ",") (141,25)
                        function call [string] (cv=) (141,29)
                          identifier "flo" [string] (cv=) (141,29)
                          lvalue expression {foldable} [float] (cv=) (141,33)
                            identifier "a" [quaternion] (cv=) (141,33)
                            identifier "y" [none] (cv=) (141,33)
                      constant expression [string] (cv=string constant: ",") (141,38)
                        string constant: "," [string] (cv=string constant: ",") (141,38)
                    function call [string] (cv=) (141,42)
                      identifier "flo" [string] (cv=) (141,42)
                      lvalue expression {foldable} [float] (cv=) (141,46)
                        identifier "a" [quaternion] (cv=) (141,46)
                        identifier "z" [none] (cv=) (141,46)
                  constant expression [string] (cv=string constant: ",") (141,51)
                    string constant: "," [string] (cv=string constant: ",") (141,51)
                function call [string] (cv=) (141,55)
                  identifier "flo" [string] (cv=) (141,55)
                  lvalue expression {foldable} [float] (cv=) (141,59)
                    identifier "a" [quaternion] (cv=) (141,59)
                    identifier "s" [none] (cv=) (141,59)
              constant expression [string] (cv=string constant: ">") (141,64)
                string constant: ">" [string] (cv=string constant: ">") (141,64)
    global storage [none] (cv=) (144,1)
      null [none] (cv=) (144,1)
      global func [none] (cv=) (144,1)
        identifier "int" [string] (cv=) (144,8)
        function decl [none] (cv=) (144,12)
          identifier "a" [integer] (cv=) (144,20)
        compound statement [none] (cv=) (145,1)
          if [none] (cv=) (146,5)
            binary expression: '==' [integer] (cv=) (146,8)
              lvalue expression {foldable} [integer] (cv=) (146,8)
                identifier "a" [integer] (cv=) (146,8)
              constant expression [integer] (cv=integer constant: 0) (146,13)
                integer constant: 0 [integer] (cv=integer constant: 0) (146,13)
            return [none] (cv=) (146,16)
              constant expression [string] (cv=string constant: "") (146,23)
                string constant: "" [string] (cv=string constant: "") (146,23)
            null [none] (cv=) (146,5)
          return [none] (cv=) (147,5)
            typecast expression [string] (cv=) (147,12)
              lvalue expression {foldable} [integer] (cv=) (147,20)
                identifier "a" [integer] (cv=) (147,20)
    global storage [none] (cv=) (150,1)
      null [none] (cv=) (150,1)
      global func [none] (cv=) (150,1)
        identifier "TightListDump" [string] (cv=) (150,8)
        function decl [none] (cv=) (150,22)
          identifier "a" [list] (cv=) (150,27)
          identifier "b" [string] (cv=) (150,37)
        compound statement [none] (cv=) (151,1)
          declaration [none] (cv=) (152,5)
            identifier "c" [string] (cv=) (152,12)
            typecast expression [string] (cv=) (152,16)
              lvalue expression {foldable} [list] (cv=) (152,24)
                identifier "a" [list] (cv=) (152,24)
          if [none] (cv=) (153,5)
            binary expression: '==' [integer] (cv=) (153,8)
              function call [integer] (cv=) (153,8)
                identifier "llStringLength" [integer] (cv=) (153,8)
                lvalue expression {foldable} [string] (cv=) (153,23)
                  identifier "b" [string] (cv=) (153,23)
              constant expression [integer] (cv=integer constant: 1) (153,27)
                integer constant: 1 [integer] (cv=integer constant: 1) (153,27)
            if [none] (cv=) (154,9)
              binary expression: '==' [integer] (cv=) (154,12)
                function call [integer] (cv=) (154,12)
                  identifier "llSubStringIndex" [integer] (cv=) (154,12)
                  lvalue expression {foldable} [string] (cv=) (154,29)
                    identifier "c" [string] (cv=) (154,29)
                  lvalue expression {foldable} [string] (cv=) (154,31)
                    identifier "b" [string] (cv=) (154,31)
                constant expression [integer] (cv=integer constant: -1) (154,37)
                  integer constant: -1 [integer] (cv=integer constant: -1) (154,37)
              jump [none] (cv=) (155,13)
                identifier "end" [none] (cv=) (155,18)
              null [none] (cv=) (154,9)
            null [none] (cv=) (153,5)
          declaration [none] (cv=) (156,5)
            identifier "d" [integer] (cv=) (156,13)
            unary expression: '-' [integer] (cv=) (156,17)
              function call [integer] (cv=) (156,18)
                identifier "llStringLength" [integer] (cv=) (156,18)
                binary expression: '+=' [string] (cv=) (156,33)
                  lvalue expression {foldable} [string] (cv=) (156,33)
                    identifier "b" [string] (cv=) (156,33)
                  constant expression [string] (cv=string constant: "|\\/?!@#$%^&*()_=:;~{}[],\n\" qQxXzZ") (156,38)
                    string constant: "|\\/?!@#$%^&*()_=:;~{}[],\n\" qQxXzZ" [string] (cv=string constant: "|\\/?!@#$%^&*()_=:;~{}[],\n\" qQxXzZ") (156,38)
          while [none] (cv=) (157,5)
            binary expression: '&&' [integer] (cv=) (157,11)
              binary expression: '+' [integer] (cv=) (157,11)
                constant expression [integer] (cv=integer constant: 1) (157,11)
                  integer constant: 1 [integer] (cv=integer constant: 1) (157,11)
                function call [integer] (cv=) (157,13)
                  identifier "llSubStringIndex" [integer] (cv=) (157,13)
                  lvalue expression {foldable} [string] (cv=) (157,30)
                    identifier "c" [string] (cv=) (157,30)
                  function call [string] (cv=) (157,32)
                    identifier "llGetSubString" [string] (cv=) (157,32)
                    lvalue expression {foldable} [string] (cv=) (157,47)
                      identifier "b" [string] (cv=) (157,47)
                    lvalue expression {foldable} [integer] (cv=) (157,49)
                      identifier "d" [integer] (cv=) (157,49)
                    lvalue expression {foldable} [integer] (cv=) (157,51)
                      identifier "d" [integer] (cv=) (157,51)
              lvalue expression {foldable} [integer] (cv=) (157,58)
                identifier "d" [integer] (cv=) (157,58)
            statement [none] (cv=) (158,9)
              unary expression: '++ (pre)' [integer] (cv=) (158,9)
                lvalue expression {foldable} [integer] (cv=) (158,11)
                  identifier "d" [integer] (cv=) (158,11)
          statement [none] (cv=) (159,5)
            binary expression: '=' [string] (cv=) (159,5)
              lvalue expression {foldable} [string] (cv=) (159,5)
                identifier "b" [string] (cv=) (159,5)
              function call [string] (cv=) (159,9)
                identifier "llGetSubString" [string] (cv=) (159,9)
                lvalue expression {foldable} [string] (cv=) (159,24)
                  identifier "b" [string] (cv=) (159,24)
                lvalue expression {foldable} [integer] (cv=) (159,26)
                  identifier "d" [integer] (cv=) (159,26)
                lvalue expression {foldable} [integer] (cv=) (159,28)
                  identifier "d" [integer] (cv=) (159,28)
          label [none] (cv=) (160,5)
            identifier "end" [none] (cv=) (160,6)
          statement [none] (cv=) (161,5)
            binary expression: '=' [string] (cv=) (161,5)
              lvalue expression {not foldable} [string] (cv=) (161,5)
                identifier "c" [string] (cv=) (161,5)
              constant expression [string] (cv=string constant: "") (161,9)
                string constant: "" [string] (cv=string constant: "") (161,9)
          return [none] (cv=) (162,5)
            binary expression: '+' [string] (cv=) (162,12)
              lvalue expression {foldable} [string] (cv=) (162,12)
                identifier "b" [string] (cv=) (162,12)
              function call [string] (cv=) (162,16)
                identifier "llDumpList2String" [string] (cv=) (162,16)
                lvalue expression {foldable} [list] (cv=) (162,34)
                  identifier "a" [list] (cv=) (162,34)
                lvalue expression {foldable} [string] (cv=) (162,37)
                  identifier "b" [string] (cv=) (162,37)
    global storage [none] (cv=) (165,1)
      null [none] (cv=) (165,1)
      global func [none] (cv=) (165,1)
        identifier "lis" [list] (cv=) (165,6)
        function decl [none] (cv=) (165,10)
          identifier "a" [list] (cv=) (165,15)
        compound statement [none] (cv=) (166,1)
          declaration [none] (cv=) (167,5)
            identifier "b" [integer] (cv=) (167,13)
            binary expression: '-' [integer] (cv=) (167,17)
              unary expression: '-' [integer] (cv=) (167,17)
                function call [integer] (cv=) (167,18)
                  identifier "llGetListLength" [integer] (cv=) (167,18)
                  lvalue expression {foldable} [list] (cv=) (167,34)
                    identifier "a" [list] (cv=) (167,34)
              constant expression [integer] (cv=integer constant: 1) (167,39)
                integer constant: 1 [integer] (cv=integer constant: 1) (167,39)
          declaration [none] (cv=) (168,5)
            identifier "c" [list] (cv=) (168,10)
            null [none] (cv=) (168,5)
          declaration [none] (cv=) (169,5)
            identifier "d" [integer] (cv=) (169,13)
            null [none] (cv=) (169,5)
          while [none] (cv=) (170,5)
            unary expression: '++ (pre)' [integer] (cv=) (170,11)
              lvalue expression {foldable} [integer] (cv=) (170,13)
                identifier "b" [integer] (cv=) (170,13)
            compound statement [none] (cv=) (171,5)
              if [none] (cv=) (172,9)
                binary expression: '==' [integer] (cv=) (172,12)
                  parenthesis expression [integer] (cv=) (172,12)
                    binary expression: '=' [integer] (cv=) (172,13)
                      lvalue expression {foldable} [integer] (cv=) (172,13)
                        identifier "d" [integer] (cv=) (172,13)
                      function call [integer] (cv=) (172,17)
                        identifier "llGetListEntryType" [integer] (cv=) (172,17)
                        lvalue expression {foldable} [list] (cv=) (172,36)
                          identifier "a" [list] (cv=) (172,36)
                        lvalue expression {foldable} [integer] (cv=) (172,38)
                          identifier "b" [integer] (cv=) (172,38)
                  lvalue expression {foldable} [integer] (cv=integer constant: 2) (172,45)
                    identifier "TYPE_FLOAT" [integer] (cv=integer constant: 2) (172,45)
                compound statement [none] (cv=) (173,9)
                  declaration [none] (cv=) (174,13)
                    identifier "e" [float] (cv=) (174,19)
                    function call [float] (cv=) (174,23)
                      identifier "llList2Float" [float] (cv=) (174,23)
                      lvalue expression {foldable} [list] (cv=) (174,36)
                        identifier "a" [list] (cv=) (174,36)
                      lvalue expression {foldable} [integer] (cv=) (174,38)
                        identifier "b" [integer] (cv=) (174,38)
                  if [none] (cv=) (175,13)
                    binary expression: '!=' [integer] (cv=) (175,16)
                      lvalue expression {foldable} [float] (cv=) (175,16)
                        identifier "e" [float] (cv=) (175,16)
                      constant expression [float] (cv=float constant: 0.000000) (175,21)
                        float constant: 0.000000 [float] (cv=float constant: 0.000000) (175,21)
                    statement [none] (cv=) (176,17)
                      binary expression: '+=' [list] (cv=) (176,17)
                        lvalue expression {foldable} [list] (cv=) (176,17)
                          identifier "c" [list] (cv=) (176,17)
                        function call [string] (cv=) (176,22)
                          identifier "flo" [string] (cv=) (176,22)
                          lvalue expression {foldable} [float] (cv=) (176,26)
                            identifier "e" [float] (cv=) (176,26)
                    statement [none] (cv=) (178,17)
                      binary expression: '+=' [list] (cv=) (178,17)
                        lvalue expression {foldable} [list] (cv=) (178,17)
                          identifier "c" [list] (cv=) (178,17)
                        constant expression [string] (cv=string constant: "") (178,22)
                          string constant: "" [string] (cv=string constant: "") (178,22)
                if [none] (cv=) (180,14)
                  binary expression: '==' [integer] (cv=) (180,17)
                    lvalue expression {foldable} [integer] (cv=) (180,17)
                      identifier "d" [integer] (cv=) (180,17)
                    lvalue expression {foldable} [integer] (cv=integer constant: 5) (180,22)
                      identifier "TYPE_VECTOR" [integer] (cv=integer constant: 5) (180,22)
                  statement [none] (cv=) (181,13)
                    binary expression: '+=' [list] (cv=) (181,13)
                      lvalue expression {foldable} [list] (cv=) (181,13)
                        identifier "c" [list] (cv=) (181,13)
                      function call [string] (cv=) (181,18)
                        identifier "vec" [string] (cv=) (181,18)
                        function call [vector] (cv=) (181,22)
                          identifier "llList2Vector" [vector] (cv=) (181,22)
                          lvalue expression {foldable} [list] (cv=) (181,36)
                            identifier "a" [list] (cv=) (181,36)
                          lvalue expression {foldable} [integer] (cv=) (181,38)
                            identifier "b" [integer] (cv=) (181,38)
                  if [none] (cv=) (182,14)
                    binary expression: '==' [integer] (cv=) (182,17)
                      lvalue expression {foldable} [integer] (cv=) (182,17)
                        identifier "d" [integer] (cv=) (182,17)
                      lvalue expression {foldable} [integer] (cv=integer constant: 6) (182,22)
                        identifier "TYPE_ROTATION" [integer] (cv=integer constant: 6) (182,22)
                    statement [none] (cv=) (183,13)
                      binary expression: '+=' [list] (cv=) (183,13)
                        lvalue expression {foldable} [list] (cv=) (183,13)
                          identifier "c" [list] (cv=) (183,13)
                        function call [string] (cv=) (183,18)
                          identifier "rot" [string] (cv=) (183,18)
                          function call [quaternion] (cv=) (183,22)
                            identifier "llList2Rot" [quaternion] (cv=) (183,22)
                            lvalue expression {foldable} [list] (cv=) (183,33)
                              identifier "a" [list] (cv=) (183,33)
                            lvalue expression {foldable} [integer] (cv=) (183,35)
                              identifier "b" [integer] (cv=) (183,35)
                    if [none] (cv=) (184,14)
                      binary expression: '==' [integer] (cv=) (184,17)
                        lvalue expression {foldable} [integer] (cv=) (184,17)
                          identifier "d" [integer] (cv=) (184,17)
                        lvalue expression {foldable} [integer] (cv=integer constant: 1) (184,22)
                          identifier "TYPE_INTEGER" [integer] (cv=integer constant: 1) (184,22)
                      statement [none] (cv=) (185,13)
                        binary expression: '+=' [list] (cv=) (185,13)
                          lvalue expression {foldable} [list] (cv=) (185,13)
                            identifier "c" [list] (cv=) (185,13)
                          function call [string] (cv=) (185,18)
                            identifier "int" [string] (cv=) (185,18)
                            function call [integer] (cv=) (185,22)
                              identifier "llList2Integer" [integer] (cv=) (185,22)
                              lvalue expression {foldable} [list] (cv=) (185,37)
                                identifier "a" [list] (cv=) (185,37)
                              lvalue expression {foldable} [integer] (cv=) (185,39)
                                identifier "b" [integer] (cv=) (185,39)
                      statement [none] (cv=) (187,13)
                        binary expression: '+=' [list] (cv=) (187,13)
                          lvalue expression {foldable} [list] (cv=) (187,13)
                            identifier "c" [list] (cv=) (187,13)
                          function call [string] (cv=) (187,18)
                            identifier "llList2String" [string] (cv=) (187,18)
                            lvalue expression {foldable} [list] (cv=) (187,32)
                              identifier "a" [list] (cv=) (187,32)
                            lvalue expression {foldable} [integer] (cv=) (187,34)
                              identifier "b" [integer] (cv=) (187,34)
          return [none] (cv=) (189,5)
            lvalue expression {foldable} [list] (cv=) (189,12)
              identifier "c" [list] (cv=) (189,12)
    global storage [none] (cv=) (192,1)
      null [none] (cv=) (192,1)
      global func [none] (cv=) (192,1)
        identifier "hex" [string] (cv=) (192,8)
        function decl [none] (cv=) (192,12)
          identifier "x" [integer] (cv=) (192,20)
        compound statement [none] (cv=) (193,1)
          declaration [none] (cv=) (194,5)
            identifier "x0" [integer] (cv=) (194,13)
            binary expression: '&' [integer] (cv=) (194,18)
              lvalue expression {foldable} [integer] (cv=) (194,18)
                identifier "x" [integer] (cv=) (194,18)
              constant expression [integer] (cv=integer constant: 15) (194,22)
                integer constant: 15 [integer] (cv=integer constant: 15) (194,22)
          declaration [none] (cv=) (195,5)
            identifier "res" [string] (cv=) (195,12)
            function call [string] (cv=) (195,18)
              identifier "llGetSubString" [string] (cv=) (195,18)
              lvalue expression {foldable} [string] (cv=string constant: "0123456789ABCDEF") (195,33)
                identifier "hexc" [string] (cv=string constant: "0123456789ABCDEF") (195,33)
              lvalue expression {foldable} [integer] (cv=) (195,39)
                identifier "x0" [integer] (cv=) (195,39)
              lvalue expression {foldable} [integer] (cv=) (195,43)
                identifier "x0" [integer] (cv=) (195,43)
          statement [none] (cv=) (196,5)
            binary expression: '=' [integer] (cv=) (196,5)
              lvalue expression {foldable} [integer] (cv=) (196,5)
                identifier "x" [integer] (cv=) (196,5)
              binary expression: '&' [integer] (cv=) (196,9)
                parenthesis expression [integer] (cv=) (196,9)
                  binary expression: '>>' [integer] (cv=) (196,10)
                    lvalue expression {foldable} [integer] (cv=) (196,10)
                      identifier "x" [integer] (cv=) (196,10)
                    constant expression [integer] (cv=integer constant: 4) (196,15)
                      integer constant: 4 [integer] (cv=integer constant: 4) (196,15)
                constant expression [integer] (cv=integer constant: 268435455) (196,20)
                  integer constant: 268435455 [integer] (cv=integer constant: 268435455) (196,20)
          while [none] (cv=) (197,5)
            binary expression: '!=' [integer] (cv=) (197,12)
              lvalue expression {foldable} [integer] (cv=) (197,12)
                identifier "x" [integer] (cv=) (197,12)
              constant expression [integer] (cv=integer constant: 0) (197,17)
                integer constant: 0 [integer] (cv=integer constant: 0) (197,17)
            compound statement [none] (cv=) (198,5)
              statement [none] (cv=) (199,9)
                binary expression: '=' [integer] (cv=) (199,9)
                  lvalue expression {foldable} [integer] (cv=) (199,9)
                    identifier "x0" [integer] (cv=) (199,9)
                  binary expression: '&' [integer] (cv=) (199,14)
                    lvalue expression {foldable} [integer] (cv=) (199,14)
                      identifier "x" [integer] (cv=) (199,14)
                    constant expression [integer] (cv=integer constant: 15) (199,18)
                      integer constant: 15 [integer] (cv=integer constant: 15) (199,18)
              statement [none] (cv=) (200,9)
                binary expression: '=' [string] (cv=) (200,9)
                  lvalue expression {foldable} [string] (cv=) (200,9)
                    identifier "res" [string] (cv=) (200,9)
                  binary expression: '+' [string] (cv=) (200,15)
                    function call [string] (cv=) (200,15)
                      identifier "llGetSubString" [string] (cv=) (200,15)
                      lvalue expression {foldable} [string] (cv=string constant: "0123456789ABCDEF") (200,30)
                        identifier "hexc" [string] (cv=string constant: "0123456789ABCDEF") (200,30)
                      lvalue expression {foldable} [integer] (cv=) (200,36)
                        identifier "x0" [integer] (cv=) (200,36)
                      lvalue expression {foldable} [integer] (cv=) (200,40)
                        identifier "x0" [integer] (cv=) (200,40)
                    lvalue expression {foldable} [string] (cv=) (200,46)
                      identifier "res" [string] (cv=) (200,46)
              statement [none] (cv=) (201,9)
                binary expression: '=' [integer] (cv=) (201,9)
                  lvalue expression {foldable} [integer] (cv=) (201,9)
                    identifier "x" [integer] (cv=) (201,9)
                  binary expression: '>>' [integer] (cv=) (201,13)
                    lvalue expression {foldable} [integer] (cv=) (201,13)
                      identifier "x" [integer] (cv=) (201,13)
                    constant expression [integer] (cv=integer constant: 4) (201,18)
                      integer constant: 4 [integer] (cv=integer constant: 4) (201,18)
          return [none] (cv=) (203,5)
            lvalue expression {foldable} [string] (cv=) (203,12)
              identifier "res" [string] (cv=) (203,12)
    global storage [none] (cv=) (206,1)
      null [none] (cv=) (206,1)
      global func [none] (cv=) (206,1)
        identifier "add" [none] (cv=) (206,1)
        function decl [none] (cv=) (206,5)
          identifier "value" [list] (cv=) (206,10)
          identifier "mask" [integer] (cv=) (206,25)
        compound statement [none] (cv=) (207,1)
          if [none] (cv=) (208,5)
            binary expression: '>' [integer] (cv=) (208,8)
              function call [integer] (cv=) (208,8)
                identifier "llStringLength" [integer] (cv=) (208,8)
                function call [string] (cv=) (208,23)
                  identifier "llDumpList2String" [string] (cv=) (208,23)
                  binary expression: '+' [list] (cv=) (208,41)
                    binary expression: '+' [list] (cv=) (208,41)
                      lvalue expression {foldable} [list] (cv=) (208,41)
                        identifier "header" [list] (cv=) (208,41)
                      lvalue expression {foldable} [list] (cv=) (208,48)
                        identifier "params" [list] (cv=) (208,48)
                    lvalue expression {foldable} [list] (cv=) (208,57)
                      identifier "value" [list] (cv=) (208,57)
                  constant expression [string] (cv=string constant: " ") (208,63)
                    string constant: " " [string] (cv=string constant: " ") (208,63)
              constant expression [integer] (cv=integer constant: 240) (208,71)
                integer constant: 240 [integer] (cv=integer constant: 240) (208,71)
            compound statement [none] (cv=) (209,5)
              statement [none] (cv=) (210,9)
                function call [none] (cv=) (210,9)
                  identifier "store" [none] (cv=) (210,9)
              statement [none] (cv=) (211,9)
                binary expression: '=' [integer] (cv=) (211,9)
                  lvalue expression {foldable} [integer] (cv=) (211,9)
                    identifier "mode" [integer] (cv=) (211,9)
                  binary expression: '|' [integer] (cv=) (211,16)
                    lvalue expression {foldable} [integer] (cv=) (211,16)
                      identifier "mask" [integer] (cv=) (211,16)
                    parenthesis expression [integer] (cv=) (211,23)
                      binary expression: '&' [integer] (cv=) (211,24)
                        lvalue expression {foldable} [integer] (cv=) (211,24)
                          identifier "mode" [integer] (cv=) (211,24)
                        constant expression [integer] (cv=integer constant: 257) (211,31)
                          integer constant: 257 [integer] (cv=integer constant: 257) (211,31)
            statement [none] (cv=) (214,9)
              binary expression: '=' [integer] (cv=) (214,9)
                lvalue expression {foldable} [integer] (cv=) (214,9)
                  identifier "mode" [integer] (cv=) (214,9)
                binary expression: '|' [integer] (cv=) (214,16)
                  lvalue expression {foldable} [integer] (cv=) (214,16)
                    identifier "mode" [integer] (cv=) (214,16)
                  lvalue expression {foldable} [integer] (cv=) (214,23)
                    identifier "mask" [integer] (cv=) (214,23)
          statement [none] (cv=) (215,2)
            binary expression: '+=' [list] (cv=) (215,2)
              lvalue expression {foldable} [list] (cv=) (215,2)
                identifier "params" [list] (cv=) (215,2)
              lvalue expression {foldable} [list] (cv=) (215,12)
                identifier "value" [list] (cv=) (215,12)
    global storage [none] (cv=) (218,1)
      null [none] (cv=) (218,1)
      global func [none] (cv=) (218,1)
        identifier "store" [none] (cv=) (218,1)
        null [none] (cv=) (218,1)
        compound statement [none] (cv=) (219,1)
          declaration [none] (cv=) (220,5)
            identifier "a" [integer] (cv=) (220,13)
            null [none] (cv=) (220,5)
          declaration [none] (cv=) (221,2)
            identifier "b" [integer] (cv=) (221,10)
            constant expression [integer] (cv=integer constant: 0) (221,14)
              integer constant: 0 [integer] (cv=integer constant: 0) (221,14)
          if [none] (cv=) (222,2)
            binary expression: '!=' [integer] (cv=) (222,5)
              function call [string] (cv=) (222,5)
                identifier "llList2String" [string] (cv=) (222,5)
                lvalue expression {foldable} [list] (cv=) (222,19)
                  identifier "params" [list] (cv=) (222,19)
                constant expression [integer] (cv=integer constant: -1) (222,26)
                  integer constant: -1 [integer] (cv=integer constant: -1) (222,26)
              lvalue expression {foldable} [string] (cv=) (222,33)
                identifier "sep" [string] (cv=) (222,33)
            statement [none] (cv=) (223,3)
              binary expression: '+=' [list] (cv=) (223,3)
                lvalue expression {foldable} [list] (cv=) (223,3)
                  identifier "params" [list] (cv=) (223,3)
                lvalue expression {foldable} [integer] (cv=) (223,13)
                  identifier "mode" [integer] (cv=) (223,13)
            statement [none] (cv=) (225,3)
              binary expression: '=' [list] (cv=) (225,3)
                lvalue expression {foldable} [list] (cv=) (225,3)
                  identifier "params" [list] (cv=) (225,3)
                function call [list] (cv=) (225,12)
                  identifier "llDeleteSubList" [list] (cv=) (225,12)
                  lvalue expression {foldable} [list] (cv=) (225,28)
                    identifier "params" [list] (cv=) (225,28)
                  constant expression [integer] (cv=integer constant: -1) (225,35)
                    integer constant: -1 [integer] (cv=integer constant: -1) (225,35)
                  constant expression [integer] (cv=integer constant: -1) (225,38)
                    integer constant: -1 [integer] (cv=integer constant: -1) (225,38)
          label [none] (cv=) (227,2)
            identifier "loop" [none] (cv=) (227,3)
          if [none] (cv=) (228,2)
            binary expression: '+' [integer] (cv=) (228,5)
              constant expression [integer] (cv=integer constant: 1) (228,5)
                integer constant: 1 [integer] (cv=integer constant: 1) (228,5)
              parenthesis expression [integer] (cv=) (228,9)
                binary expression: '=' [integer] (cv=) (228,10)
                  lvalue expression {not foldable} [integer] (cv=) (228,10)
                    identifier "a" [integer] (cv=) (228,10)
                  lvalue expression {not foldable} [integer] (cv=) (228,14)
                    identifier "b" [integer] (cv=) (228,14)
            if [none] (cv=) (229,3)
              binary expression: '=' [integer] (cv=) (229,6)
                lvalue expression {not foldable} [integer] (cv=) (229,6)
                  identifier "b" [integer] (cv=) (229,6)
                binary expression: '+' [integer] (cv=) (229,10)
                  constant expression [integer] (cv=integer constant: 1) (229,10)
                    integer constant: 1 [integer] (cv=integer constant: 1) (229,10)
                  function call [integer] (cv=) (229,14)
                    identifier "llListFindList" [integer] (cv=) (229,14)
                    function call [list] (cv=) (229,29)
                      identifier "llList2List" [list] (cv=) (229,29)
                      binary expression: '+' [list] (cv=) (229,41)
                        lvalue expression {foldable} [list] (cv=) (229,41)
                          identifier "params" [list] (cv=) (229,41)
                        list expression [list] (cv=) (229,50)
                          lvalue expression {foldable} [string] (cv=) (229,51)
                            identifier "sep" [string] (cv=) (229,51)
                      binary expression: '+' [integer] (cv=) (229,56)
                        lvalue expression {not foldable} [integer] (cv=) (229,56)
                          identifier "a" [integer] (cv=) (229,56)
                        constant expression [integer] (cv=integer constant: 1) (229,60)
                          integer constant: 1 [integer] (cv=integer constant: 1) (229,60)
                      constant expression [integer] (cv=integer constant: 200) (229,62)
                        integer constant: 200 [integer] (cv=integer constant: 200) (229,62)
                    list expression [list] (cv=) (229,67)
                      lvalue expression {foldable} [string] (cv=) (229,68)
                        identifier "sep" [string] (cv=) (229,68)
              compound statement [none] (cv=) (230,2)
                statement [none] (cv=) (231,3)
                  binary expression: '+=' [integer] (cv=) (231,3)
                    lvalue expression {not foldable} [integer] (cv=) (231,3)
                      identifier "b" [integer] (cv=) (231,3)
                    lvalue expression {not foldable} [integer] (cv=) (231,8)
                      identifier "a" [integer] (cv=) (231,8)
                statement [none] (cv=) (233,3)
                  binary expression: '=' [list] (cv=) (233,3)
                    lvalue expression {foldable} [list] (cv=) (233,3)
                      identifier "params" [list] (cv=) (233,3)
                    function call [list] (cv=) (233,12)
                      identifier "llListInsertList" [list] (cv=) (233,12)
                      function call [list] (cv=) (233,29)
                        identifier "llDeleteSubList" [list] (cv=) (233,29)
                        lvalue expression {foldable} [list] (cv=) (233,45)
                          identifier "params" [list] (cv=) (233,45)
                        binary expression: '-' [integer] (cv=) (233,52)
                          lvalue expression {not foldable} [integer] (cv=) (233,52)
                            identifier "b" [integer] (cv=) (233,52)
                          constant expression [integer] (cv=integer constant: 1) (233,56)
                            integer constant: 1 [integer] (cv=integer constant: 1) (233,56)
                        lvalue expression {not foldable} [integer] (cv=) (233,59)
                          identifier "b" [integer] (cv=) (233,59)
                      list expression [list] (cv=) (233,62)
                        function call [string] (cv=) (233,63)
                          identifier "hex" [string] (cv=) (233,63)
                          binary expression: '|' [integer] (cv=) (233,67)
                            function call [integer] (cv=) (233,67)
                              identifier "llList2Integer" [integer] (cv=) (233,67)
                              lvalue expression {foldable} [list] (cv=) (233,82)
                                identifier "params" [list] (cv=) (233,82)
                              binary expression: '-' [integer] (cv=) (233,90)
                                lvalue expression {not foldable} [integer] (cv=) (233,90)
                                  identifier "b" [integer] (cv=) (233,90)
                                constant expression [integer] (cv=integer constant: 1) (233,94)
                                  integer constant: 1 [integer] (cv=integer constant: 1) (233,94)
                            parenthesis expression [integer] (cv=) (233,99)
                              binary expression: '<<' [integer] (cv=) (233,100)
                                unary expression: '!' [integer] (cv=) (233,100)
                                  lvalue expression {not foldable} [integer] (cv=) (233,101)
                                    identifier "a" [integer] (cv=) (233,101)
                                constant expression [integer] (cv=integer constant: 5) (233,106)
                                  integer constant: 5 [integer] (cv=integer constant: 5) (233,106)
                      lvalue expression {not foldable} [integer] (cv=) (233,112)
                        identifier "a" [integer] (cv=) (233,112)
                jump [none] (cv=) (234,3)
                  identifier "loop" [none] (cv=) (234,8)
              null [none] (cv=) (229,3)
            null [none] (cv=) (228,2)
          statement [none] (cv=) (236,2)
            binary expression: '=' [list] (cv=) (236,2)
              lvalue expression {foldable} [list] (cv=) (236,2)
                identifier "params" [list] (cv=) (236,2)
              list expression [list] (cv=) (236,11)
                function call [string] (cv=) (236,12)
                  identifier "TightListDump" [string] (cv=) (236,12)
                  lvalue expression {foldable} [list] (cv=) (236,26)
                    identifier "params" [list] (cv=) (236,26)
                  constant expression [string] (cv=string constant: "") (236,33)
                    string constant: "" [string] (cv=string constant: "") (236,33)
          statement [none] (cv=) (238,5)
            binary expression: '+=' [list] (cv=) (238,5)
              lvalue expression {foldable} [list] (cv=) (238,5)
                identifier "commands" [list] (cv=) (238,5)
              lvalue expression {foldable} [list] (cv=) (238,17)
                identifier "params" [list] (cv=) (238,17)
          statement [none] (cv=) (239,2)
            binary expression: '=' [list] (cv=) (239,2)
              lvalue expression {foldable} [list] (cv=) (239,2)
                identifier "params" [list] (cv=) (239,2)
              list expression [list] (cv=) (239,11)
                lvalue expression {foldable} [string] (cv=) (239,12)
                  identifier "sep" [string] (cv=) (239,12)
          if [none] (cv=) (240,2)
            binary expression: '&' [integer] (cv=) (240,5)
              lvalue expression {foldable} [integer] (cv=) (240,5)
                identifier "mode" [integer] (cv=) (240,5)
              constant expression [integer] (cv=integer constant: 256) (240,12)
                integer constant: 256 [integer] (cv=integer constant: 256) (240,12)
            statement [none] (cv=) (241,3)
              binary expression: '+=' [list] (cv=) (241,3)
                lvalue expression {foldable} [list] (cv=) (241,3)
                  identifier "params" [list] (cv=) (241,3)
                lvalue expression {foldable} [integer] (cv=) (241,13)
                  identifier "cface" [integer] (cv=) (241,13)
            null [none] (cv=) (240,2)
          statement [none] (cv=) (242,5)
            binary expression: '=' [integer] (cv=) (242,5)
              lvalue expression {foldable} [integer] (cv=) (242,5)
                identifier "recycle_mask" [integer] (cv=) (242,5)
              binary expression: '|' [integer] (cv=) (242,20)
                lvalue expression {foldable} [integer] (cv=) (242,20)
                  identifier "recycle_mask" [integer] (cv=) (242,20)
                lvalue expression {foldable} [integer] (cv=) (242,35)
                  identifier "mode" [integer] (cv=) (242,35)
    global storage [none] (cv=) (245,1)
      null [none] (cv=) (245,1)
      global func [none] (cv=) (245,1)
        identifier "break" [none] (cv=) (245,1)
        null [none] (cv=) (245,1)
        compound statement [none] (cv=) (246,1)
          if [none] (cv=) (247,2)
            binary expression: '&' [integer] (cv=) (247,5)
              lvalue expression {foldable} [integer] (cv=) (247,5)
                identifier "mode" [integer] (cv=) (247,5)
              constant expression [integer] (cv=integer constant: -80) (247,12)
                integer constant: -80 [integer] (cv=integer constant: -80) (247,12)
            compound statement [none] (cv=) (248,2)
              statement [none] (cv=) (249,3)
                binary expression: '+=' [list] (cv=) (249,3)
                  lvalue expression {foldable} [list] (cv=) (249,3)
                    identifier "params" [list] (cv=) (249,3)
                  lvalue expression {foldable} [integer] (cv=) (249,13)
                    identifier "mode" [integer] (cv=) (249,13)
              statement [none] (cv=) (250,3)
                binary expression: '=' [integer] (cv=) (250,3)
                  lvalue expression {foldable} [integer] (cv=) (250,3)
                    identifier "recycle_mask" [integer] (cv=) (250,3)
                  binary expression: '|' [integer] (cv=) (250,18)
                    lvalue expression {foldable} [integer] (cv=) (250,18)
                      identifier "recycle_mask" [integer] (cv=) (250,18)
                    lvalue expression {foldable} [integer] (cv=) (250,33)
                      identifier "mode" [integer] (cv=) (250,33)
              statement [none] (cv=) (251,3)
                binary expression: '=' [integer] (cv=) (251,3)
                  lvalue expression {foldable} [integer] (cv=) (251,3)
                    identifier "mode" [integer] (cv=) (251,3)
                  constant expression [integer] (cv=integer constant: 1) (251,10)
                    integer constant: 1 [integer] (cv=integer constant: 1) (251,10)
              statement [none] (cv=) (252,3)
                binary expression: '+=' [list] (cv=) (252,3)
                  lvalue expression {foldable} [list] (cv=) (252,3)
                    identifier "params" [list] (cv=) (252,3)
                  lvalue expression {foldable} [string] (cv=) (252,13)
                    identifier "sep" [string] (cv=) (252,13)
            null [none] (cv=) (247,2)
    global storage [none] (cv=) (256,1)
      null [none] (cv=) (256,1)
      global func [none] (cv=) (256,1)
        identifier "theFace" [none] (cv=) (256,1)
        function decl [none] (cv=) (256,9)
          identifier "f" [integer] (cv=) (256,17)
        compound statement [none] (cv=) (257,1)
          if [none] (cv=) (258,5)
            lvalue expression {foldable} [integer] (cv=) (258,9)
              identifier "multiplefaces" [integer] (cv=) (258,9)
            statement [none] (cv=) (259,9)
              function call [none] (cv=) (259,9)
                identifier "add" [none] (cv=) (259,9)
                list expression [list] (cv=) (259,13)
                  lvalue expression {foldable} [integer] (cv=) (259,14)
                    identifier "f" [integer] (cv=) (259,14)
                constant expression [integer] (cv=integer constant: 256) (259,18)
                  integer constant: 256 [integer] (cv=integer constant: 256) (259,18)
            null [none] (cv=) (258,5)
          if [none] (cv=) (261,5)
            function call [integer] (cv=) (261,9)
              identifier "llList2Integer" [integer] (cv=) (261,9)
              function call [list] (cv=) (261,24)
                identifier "llGetPrimitiveParams" [list] (cv=) (261,24)
                list expression [list] (cv=) (261,45)
                  lvalue expression {foldable} [integer] (cv=integer constant: 20) (261,46)
                    identifier "PRIM_FULLBRIGHT" [integer] (cv=integer constant: 20) (261,46)
                  lvalue expression {foldable} [integer] (cv=) (261,63)
                    identifier "f" [integer] (cv=) (261,63)
              constant expression [integer] (cv=integer constant: 0) (261,68)
                integer constant: 0 [integer] (cv=integer constant: 0) (261,68)
            statement [none] (cv=) (262,9)
              binary expression: '=' [integer] (cv=) (262,9)
                lvalue expression {foldable} [integer] (cv=) (262,9)
                  identifier "mode" [integer] (cv=) (262,9)
                binary expression: '|' [integer] (cv=) (262,16)
                  lvalue expression {foldable} [integer] (cv=) (262,16)
                    identifier "mode" [integer] (cv=) (262,16)
                  constant expression [integer] (cv=integer constant: 16) (262,23)
                    integer constant: 16 [integer] (cv=integer constant: 16) (262,23)
            null [none] (cv=) (261,5)
          if [none] (cv=) (264,2)
            binary expression: '!=' [integer] (cv=) (264,6)
              function call [string] (cv=) (264,6)
                identifier "llGetTexture" [string] (cv=) (264,6)
                lvalue expression {foldable} [integer] (cv=) (264,19)
                  identifier "f" [integer] (cv=) (264,19)
              constant expression [string] (cv=string constant: "5748decc-f629-461c-9a36-a35a221fe21f") (264,25)
                string constant: "5748decc-f629-461c-9a36-a35a221fe21f" [string] (cv=string constant: "5748decc-f629-461c-9a36-a35a221fe21f") (264,25)
            statement [none] (cv=) (265,3)
              function call [none] (cv=) (265,3)
                identifier "add" [none] (cv=) (265,3)
                list expression [list] (cv=) (265,7)
                  function call [string] (cv=) (265,8)
                    identifier "llGetTexture" [string] (cv=) (265,8)
                    lvalue expression {foldable} [integer] (cv=) (265,21)
                      identifier "f" [integer] (cv=) (265,21)
                constant expression [integer] (cv=integer constant: 512) (265,26)
                  integer constant: 512 [integer] (cv=integer constant: 512) (265,26)
            null [none] (cv=) (264,2)
          declaration [none] (cv=) (267,5)
            identifier "t_v" [vector] (cv=) (267,12)
            function call [vector] (cv=) (267,18)
              identifier "llGetTextureScale" [vector] (cv=) (267,18)
              lvalue expression {foldable} [integer] (cv=) (267,36)
                identifier "f" [integer] (cv=) (267,36)
          if [none] (cv=) (268,5)
            binary expression: '!=' [integer] (cv=) (268,9)
              lvalue expression {foldable} [vector] (cv=) (268,9)
                identifier "t_v" [vector] (cv=) (268,9)
              vector expression [vector] (cv=vector constant: <1, 1, 0>) (268,16)
                constant expression [float] (cv=float constant: 1.000000) (268,17)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (268,17)
                constant expression [float] (cv=float constant: 1.000000) (268,22)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (268,22)
                constant expression [float] (cv=float constant: 0.000000) (268,27)
                  float constant: 0.000000 [float] (cv=float constant: 0.000000) (268,27)
            statement [none] (cv=) (269,9)
              function call [none] (cv=) (269,9)
                identifier "add" [none] (cv=) (269,9)
                list expression [list] (cv=) (269,13)
                  function call [string] (cv=) (269,14)
                    identifier "vec" [string] (cv=) (269,14)
                    lvalue expression {foldable} [vector] (cv=) (269,18)
                      identifier "t_v" [vector] (cv=) (269,18)
                constant expression [integer] (cv=integer constant: 1024) (269,25)
                  integer constant: 1024 [integer] (cv=integer constant: 1024) (269,25)
            null [none] (cv=) (268,5)
          statement [none] (cv=) (271,5)
            binary expression: '=' [vector] (cv=) (271,5)
              lvalue expression {foldable} [vector] (cv=) (271,5)
                identifier "t_v" [vector] (cv=) (271,5)
              function call [vector] (cv=) (271,11)
                identifier "llGetTextureOffset" [vector] (cv=) (271,11)
                lvalue expression {foldable} [integer] (cv=) (271,30)
                  identifier "f" [integer] (cv=) (271,30)
          if [none] (cv=) (272,5)
            binary expression: '!=' [integer] (cv=) (272,9)
              lvalue expression {foldable} [vector] (cv=) (272,9)
                identifier "t_v" [vector] (cv=) (272,9)
              lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (272,16)
                identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (272,16)
            statement [none] (cv=) (273,9)
              function call [none] (cv=) (273,9)
                identifier "add" [none] (cv=) (273,9)
                list expression [list] (cv=) (273,13)
                  function call [string] (cv=) (273,14)
                    identifier "vec" [string] (cv=) (273,14)
                    lvalue expression {foldable} [vector] (cv=) (273,18)
                      identifier "t_v" [vector] (cv=) (273,18)
                constant expression [integer] (cv=integer constant: 2048) (273,25)
                  integer constant: 2048 [integer] (cv=integer constant: 2048) (273,25)
            statement [none] (cv=) (275,9)
              binary expression: '=' [integer] (cv=) (275,9)
                lvalue expression {foldable} [integer] (cv=) (275,9)
                  identifier "mode" [integer] (cv=) (275,9)
                binary expression: '|' [integer] (cv=) (275,16)
                  lvalue expression {foldable} [integer] (cv=) (275,16)
                    identifier "mode" [integer] (cv=) (275,16)
                  constant expression [integer] (cv=integer constant: 2) (275,23)
                    integer constant: 2 [integer] (cv=integer constant: 2) (275,23)
          declaration [none] (cv=) (277,5)
            identifier "t_f" [float] (cv=) (277,11)
            function call [float] (cv=) (277,17)
              identifier "llGetTextureRot" [float] (cv=) (277,17)
              lvalue expression {foldable} [integer] (cv=) (277,33)
                identifier "f" [integer] (cv=) (277,33)
          if [none] (cv=) (278,5)
            binary expression: '!=' [integer] (cv=) (278,9)
              lvalue expression {foldable} [float] (cv=) (278,9)
                identifier "t_f" [float] (cv=) (278,9)
              constant expression [float] (cv=float constant: 0.000000) (278,16)
                float constant: 0.000000 [float] (cv=float constant: 0.000000) (278,16)
            statement [none] (cv=) (279,9)
              function call [none] (cv=) (279,9)
                identifier "add" [none] (cv=) (279,9)
                list expression [list] (cv=) (279,13)
                  function call [string] (cv=) (279,14)
                    identifier "flo" [string] (cv=) (279,14)
                    lvalue expression {foldable} [float] (cv=) (279,18)
                      identifier "t_f" [float] (cv=) (279,18)
                constant expression [integer] (cv=integer constant: 4096) (279,25)
                  integer constant: 4096 [integer] (cv=integer constant: 4096) (279,25)
            statement [none] (cv=) (281,9)
              binary expression: '=' [integer] (cv=) (281,9)
                lvalue expression {foldable} [integer] (cv=) (281,9)
                  identifier "mode" [integer] (cv=) (281,9)
                binary expression: '|' [integer] (cv=) (281,16)
                  lvalue expression {foldable} [integer] (cv=) (281,16)
                    identifier "mode" [integer] (cv=) (281,16)
                  constant expression [integer] (cv=integer constant: 2) (281,23)
                    integer constant: 2 [integer] (cv=integer constant: 2) (281,23)
          statement [none] (cv=) (284,5)
            binary expression: '=' [vector] (cv=) (284,5)
              lvalue expression {foldable} [vector] (cv=) (284,5)
                identifier "t_v" [vector] (cv=) (284,5)
              function call [vector] (cv=) (284,11)
                identifier "llGetColor" [vector] (cv=) (284,11)
                lvalue expression {foldable} [integer] (cv=) (284,22)
                  identifier "f" [integer] (cv=) (284,22)
          if [none] (cv=) (285,5)
            binary expression: '!=' [integer] (cv=) (285,9)
              lvalue expression {foldable} [vector] (cv=) (285,9)
                identifier "t_v" [vector] (cv=) (285,9)
              vector expression [vector] (cv=vector constant: <1, 1, 1>) (285,16)
                constant expression [float] (cv=float constant: 1.000000) (285,17)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (285,17)
                constant expression [float] (cv=float constant: 1.000000) (285,22)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (285,22)
                constant expression [float] (cv=float constant: 1.000000) (285,27)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (285,27)
            statement [none] (cv=) (286,9)
              function call [none] (cv=) (286,9)
                identifier "add" [none] (cv=) (286,9)
                list expression [list] (cv=) (286,13)
                  function call [string] (cv=) (286,14)
                    identifier "vec" [string] (cv=) (286,14)
                    lvalue expression {foldable} [vector] (cv=) (286,18)
                      identifier "t_v" [vector] (cv=) (286,18)
                constant expression [integer] (cv=integer constant: 8192) (286,25)
                  integer constant: 8192 [integer] (cv=integer constant: 8192) (286,25)
            statement [none] (cv=) (288,9)
              binary expression: '=' [integer] (cv=) (288,9)
                lvalue expression {foldable} [integer] (cv=) (288,9)
                  identifier "mode" [integer] (cv=) (288,9)
                binary expression: '|' [integer] (cv=) (288,16)
                  lvalue expression {foldable} [integer] (cv=) (288,16)
                    identifier "mode" [integer] (cv=) (288,16)
                  constant expression [integer] (cv=integer constant: 4) (288,23)
                    integer constant: 4 [integer] (cv=integer constant: 4) (288,23)
          statement [none] (cv=) (290,5)
            binary expression: '=' [float] (cv=) (290,5)
              lvalue expression {foldable} [float] (cv=) (290,5)
                identifier "t_f" [float] (cv=) (290,5)
              function call [float] (cv=) (290,11)
                identifier "llGetAlpha" [float] (cv=) (290,11)
                lvalue expression {foldable} [integer] (cv=) (290,22)
                  identifier "f" [integer] (cv=) (290,22)
          if [none] (cv=) (291,5)
            binary expression: '!=' [integer] (cv=) (291,10)
              lvalue expression {foldable} [integer] (cv=) (291,10)
                identifier "f" [integer] (cv=) (291,10)
              constant expression [float] (cv=float constant: 1.000000) (291,15)
                float constant: 1.000000 [float] (cv=float constant: 1.000000) (291,15)
            statement [none] (cv=) (292,9)
              function call [none] (cv=) (292,9)
                identifier "add" [none] (cv=) (292,9)
                list expression [list] (cv=) (292,13)
                  function call [string] (cv=) (292,14)
                    identifier "flo" [string] (cv=) (292,14)
                    lvalue expression {foldable} [float] (cv=) (292,18)
                      identifier "t_f" [float] (cv=) (292,18)
                constant expression [integer] (cv=integer constant: 16384) (292,25)
                  integer constant: 16384 [integer] (cv=integer constant: 16384) (292,25)
            statement [none] (cv=) (294,9)
              binary expression: '=' [integer] (cv=) (294,9)
                lvalue expression {foldable} [integer] (cv=) (294,9)
                  identifier "mode" [integer] (cv=) (294,9)
                binary expression: '|' [integer] (cv=) (294,16)
                  lvalue expression {foldable} [integer] (cv=) (294,16)
                    identifier "mode" [integer] (cv=) (294,16)
                  constant expression [integer] (cv=integer constant: 4) (294,23)
                    integer constant: 4 [integer] (cv=integer constant: 4) (294,23)
          declaration [none] (cv=) (296,5)
            identifier "t_l" [list] (cv=) (296,10)
            function call [list] (cv=) (296,16)
              identifier "llGetPrimitiveParams" [list] (cv=) (296,16)
              list expression [list] (cv=) (296,37)
                lvalue expression {foldable} [integer] (cv=integer constant: 19) (296,38)
                  identifier "PRIM_BUMP_SHINY" [integer] (cv=integer constant: 19) (296,38)
                lvalue expression {foldable} [integer] (cv=) (296,55)
                  identifier "f" [integer] (cv=) (296,55)
          declaration [none] (cv=) (297,5)
            identifier "t_i" [integer] (cv=) (297,13)
            function call [integer] (cv=) (297,19)
              identifier "llList2Integer" [integer] (cv=) (297,19)
              lvalue expression {foldable} [list] (cv=) (297,34)
                identifier "t_l" [list] (cv=) (297,34)
              constant expression [integer] (cv=integer constant: 0) (297,39)
                integer constant: 0 [integer] (cv=integer constant: 0) (297,39)
          if [none] (cv=) (298,5)
            binary expression: '!=' [integer] (cv=) (298,9)
              lvalue expression {foldable} [integer] (cv=) (298,9)
                identifier "t_i" [integer] (cv=) (298,9)
              lvalue expression {foldable} [integer] (cv=integer constant: 0) (298,16)
                identifier "PRIM_SHINY_NONE" [integer] (cv=integer constant: 0) (298,16)
            statement [none] (cv=) (299,9)
              function call [none] (cv=) (299,9)
                identifier "add" [none] (cv=) (299,9)
                list expression [list] (cv=) (299,13)
                  lvalue expression {foldable} [integer] (cv=) (299,14)
                    identifier "t_i" [integer] (cv=) (299,14)
                constant expression [integer] (cv=integer constant: 32768) (299,20)
                  integer constant: 32768 [integer] (cv=integer constant: 32768) (299,20)
            statement [none] (cv=) (301,9)
              binary expression: '=' [integer] (cv=) (301,9)
                lvalue expression {foldable} [integer] (cv=) (301,9)
                  identifier "mode" [integer] (cv=) (301,9)
                binary expression: '|' [integer] (cv=) (301,16)
                  lvalue expression {foldable} [integer] (cv=) (301,16)
                    identifier "mode" [integer] (cv=) (301,16)
                  constant expression [integer] (cv=integer constant: 8) (301,23)
                    integer constant: 8 [integer] (cv=integer constant: 8) (301,23)
          statement [none] (cv=) (303,5)
            binary expression: '=' [integer] (cv=) (303,5)
              lvalue expression {foldable} [integer] (cv=) (303,5)
                identifier "t_i" [integer] (cv=) (303,5)
              function call [integer] (cv=) (303,11)
                identifier "llList2Integer" [integer] (cv=) (303,11)
                lvalue expression {foldable} [list] (cv=) (303,26)
                  identifier "t_l" [list] (cv=) (303,26)
                constant expression [integer] (cv=integer constant: 1) (303,31)
                  integer constant: 1 [integer] (cv=integer constant: 1) (303,31)
          if [none] (cv=) (304,5)
            binary expression: '!=' [integer] (cv=) (304,9)
              lvalue expression {foldable} [integer] (cv=) (304,9)
                identifier "t_i" [integer] (cv=) (304,9)
              lvalue expression {foldable} [integer] (cv=integer constant: 0) (304,16)
                identifier "PRIM_BUMP_NONE" [integer] (cv=integer constant: 0) (304,16)
            statement [none] (cv=) (305,9)
              function call [none] (cv=) (305,9)
                identifier "add" [none] (cv=) (305,9)
                list expression [list] (cv=) (305,13)
                  lvalue expression {foldable} [integer] (cv=) (305,14)
                    identifier "t_i" [integer] (cv=) (305,14)
                constant expression [integer] (cv=integer constant: 65536) (305,20)
                  integer constant: 65536 [integer] (cv=integer constant: 65536) (305,20)
            statement [none] (cv=) (307,9)
              binary expression: '=' [integer] (cv=) (307,9)
                lvalue expression {foldable} [integer] (cv=) (307,9)
                  identifier "mode" [integer] (cv=) (307,9)
                binary expression: '|' [integer] (cv=) (307,16)
                  lvalue expression {foldable} [integer] (cv=) (307,16)
                    identifier "mode" [integer] (cv=) (307,16)
                  constant expression [integer] (cv=integer constant: 8) (307,23)
                    integer constant: 8 [integer] (cv=integer constant: 8) (307,23)
    global storage [none] (cv=) (310,1)
      null [none] (cv=) (310,1)
      global func [none] (cv=) (310,1)
        identifier "checkFaces" [none] (cv=) (310,1)
        null [none] (cv=) (310,1)
        compound statement [none] (cv=) (311,1)
          declaration [none] (cv=) (312,5)
            identifier "max" [integer] (cv=) (312,13)
            function call [integer] (cv=) (312,19)
              identifier "llGetNumberOfSides" [integer] (cv=) (312,19)
          statement [none] (cv=) (313,5)
            binary expression: '=' [integer] (cv=) (313,5)
              lvalue expression {foldable} [integer] (cv=) (313,5)
                identifier "multiplefaces" [integer] (cv=) (313,5)
              lvalue expression {foldable} [integer] (cv=integer constant: 0) (313,21)
                identifier "FALSE" [integer] (cv=integer constant: 0) (313,21)
          declaration [none] (cv=) (314,5)
            identifier "texture" [string] (cv=) (314,12)
            function call [string] (cv=) (314,22)
              identifier "llGetTexture" [string] (cv=) (314,22)
              constant expression [integer] (cv=integer constant: 0) (314,35)
                integer constant: 0 [integer] (cv=integer constant: 0) (314,35)
          declaration [none] (cv=) (315,5)
            identifier "color" [vector] (cv=) (315,12)
            function call [vector] (cv=) (315,20)
              identifier "llGetColor" [vector] (cv=) (315,20)
              constant expression [integer] (cv=integer constant: 0) (315,31)
                integer constant: 0 [integer] (cv=integer constant: 0) (315,31)
          declaration [none] (cv=) (316,5)
            identifier "alpha" [float] (cv=) (316,11)
            function call [float] (cv=) (316,19)
              identifier "llGetAlpha" [float] (cv=) (316,19)
              constant expression [integer] (cv=integer constant: 0) (316,30)
                integer constant: 0 [integer] (cv=integer constant: 0) (316,30)
          declaration [none] (cv=) (317,5)
            identifier "fullbrights" [list] (cv=) (317,10)
            function call [list] (cv=) (317,24)
              identifier "llGetPrimitiveParams" [list] (cv=) (317,24)
              list expression [list] (cv=list constant: 2 entries) (317,45)
                lvalue expression {foldable} [integer] (cv=integer constant: 20) (317,46)
                  identifier "PRIM_FULLBRIGHT" [integer] (cv=integer constant: 20) (317,46)
                lvalue expression {foldable} [integer] (cv=integer constant: -1) (317,63)
                  identifier "ALL_SIDES" [integer] (cv=integer constant: -1) (317,63)
          declaration [none] (cv=) (318,5)
            identifier "fullbright" [integer] (cv=) (318,13)
            function call [integer] (cv=) (318,26)
              identifier "llList2Integer" [integer] (cv=) (318,26)
              lvalue expression {foldable} [list] (cv=) (318,41)
                identifier "fullbrights" [list] (cv=) (318,41)
              constant expression [integer] (cv=integer constant: 0) (318,54)
                integer constant: 0 [integer] (cv=integer constant: 0) (318,54)
          declaration [none] (cv=) (319,5)
            identifier "bump_shiny" [list] (cv=) (319,10)
            function call [list] (cv=) (319,23)
              identifier "llGetPrimitiveParams" [list] (cv=) (319,23)
              list expression [list] (cv=list constant: 2 entries) (319,44)
                lvalue expression {foldable} [integer] (cv=integer constant: 19) (319,45)
                  identifier "PRIM_BUMP_SHINY" [integer] (cv=integer constant: 19) (319,45)
                lvalue expression {foldable} [integer] (cv=integer constant: -1) (319,62)
                  identifier "ALL_SIDES" [integer] (cv=integer constant: -1) (319,62)
          declaration [none] (cv=) (320,5)
            identifier "bump" [integer] (cv=) (320,13)
            function call [integer] (cv=) (320,20)
              identifier "llList2Integer" [integer] (cv=) (320,20)
              lvalue expression {foldable} [list] (cv=) (320,35)
                identifier "bump_shiny" [list] (cv=) (320,35)
              constant expression [integer] (cv=integer constant: 1) (320,46)
                integer constant: 1 [integer] (cv=integer constant: 1) (320,46)
          declaration [none] (cv=) (321,5)
            identifier "shiny" [integer] (cv=) (321,13)
            function call [integer] (cv=) (321,21)
              identifier "llList2Integer" [integer] (cv=) (321,21)
              lvalue expression {foldable} [list] (cv=) (321,36)
                identifier "bump_shiny" [list] (cv=) (321,36)
              constant expression [integer] (cv=integer constant: 0) (321,47)
                integer constant: 0 [integer] (cv=integer constant: 0) (321,47)
          declaration [none] (cv=) (323,5)
            identifier "i" [integer] (cv=) (323,13)
            constant expression [integer] (cv=integer constant: 1) (323,17)
              integer constant: 1 [integer] (cv=integer constant: 1) (323,17)
          for [none] (cv=) (324,5)
            null [none] (cv=) (324,5)
            binary expression: '&&' [integer] (cv=) (324,12)
              binary expression: '<' [integer] (cv=) (324,12)
                lvalue expression {foldable} [integer] (cv=) (324,12)
                  identifier "i" [integer] (cv=) (324,12)
                lvalue expression {foldable} [integer] (cv=) (324,14)
                  identifier "max" [integer] (cv=) (324,14)
              unary expression: '!' [integer] (cv=) (324,21)
                lvalue expression {foldable} [integer] (cv=) (324,22)
                  identifier "multiplefaces" [integer] (cv=) (324,22)
            ast node list [none] (cv=) (324,37)
              unary expression: '++ (pre)' [integer] (cv=) (324,37)
                lvalue expression {foldable} [integer] (cv=) (324,39)
                  identifier "i" [integer] (cv=) (324,39)
            compound statement [none] (cv=) (325,5)
              if [none] (cv=) (326,9)
                binary expression: '!=' [integer] (cv=) (326,13)
                  function call [string] (cv=) (326,13)
                    identifier "llGetTexture" [string] (cv=) (326,13)
                    lvalue expression {foldable} [integer] (cv=) (326,26)
                      identifier "i" [integer] (cv=) (326,26)
                  lvalue expression {foldable} [string] (cv=) (326,32)
                    identifier "texture" [string] (cv=) (326,32)
                statement [none] (cv=) (327,13)
                  binary expression: '=' [integer] (cv=) (327,13)
                    lvalue expression {foldable} [integer] (cv=) (327,13)
                      identifier "multiplefaces" [integer] (cv=) (327,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (327,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (327,29)
                null [none] (cv=) (326,9)
              if [none] (cv=) (329,9)
                binary expression: '!=' [integer] (cv=) (329,13)
                  function call [vector] (cv=) (329,13)
                    identifier "llGetColor" [vector] (cv=) (329,13)
                    lvalue expression {foldable} [integer] (cv=) (329,24)
                      identifier "i" [integer] (cv=) (329,24)
                  lvalue expression {foldable} [vector] (cv=) (329,30)
                    identifier "color" [vector] (cv=) (329,30)
                statement [none] (cv=) (330,13)
                  binary expression: '=' [integer] (cv=) (330,13)
                    lvalue expression {foldable} [integer] (cv=) (330,13)
                      identifier "multiplefaces" [integer] (cv=) (330,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (330,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (330,29)
                null [none] (cv=) (329,9)
              if [none] (cv=) (332,9)
                binary expression: '!=' [integer] (cv=) (332,13)
                  function call [float] (cv=) (332,13)
                    identifier "llGetAlpha" [float] (cv=) (332,13)
                    lvalue expression {foldable} [integer] (cv=) (332,24)
                      identifier "i" [integer] (cv=) (332,24)
                  lvalue expression {foldable} [float] (cv=) (332,30)
                    identifier "alpha" [float] (cv=) (332,30)
                statement [none] (cv=) (333,13)
                  binary expression: '=' [integer] (cv=) (333,13)
                    lvalue expression {foldable} [integer] (cv=) (333,13)
                      identifier "multiplefaces" [integer] (cv=) (333,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (333,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (333,29)
                null [none] (cv=) (332,9)
              if [none] (cv=) (335,9)
                binary expression: '!=' [integer] (cv=) (335,13)
                  function call [integer] (cv=) (335,13)
                    identifier "llList2Integer" [integer] (cv=) (335,13)
                    lvalue expression {foldable} [list] (cv=) (335,28)
                      identifier "fullbrights" [list] (cv=) (335,28)
                    lvalue expression {foldable} [integer] (cv=) (335,41)
                      identifier "i" [integer] (cv=) (335,41)
                  lvalue expression {foldable} [integer] (cv=) (335,47)
                    identifier "fullbright" [integer] (cv=) (335,47)
                statement [none] (cv=) (336,13)
                  binary expression: '=' [integer] (cv=) (336,13)
                    lvalue expression {foldable} [integer] (cv=) (336,13)
                      identifier "multiplefaces" [integer] (cv=) (336,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (336,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (336,29)
                null [none] (cv=) (335,9)
              if [none] (cv=) (338,9)
                binary expression: '!=' [integer] (cv=) (338,13)
                  function call [integer] (cv=) (338,13)
                    identifier "llList2Integer" [integer] (cv=) (338,13)
                    lvalue expression {foldable} [list] (cv=) (338,28)
                      identifier "bump_shiny" [list] (cv=) (338,28)
                    binary expression: '+' [integer] (cv=) (338,40)
                      binary expression: '*' [integer] (cv=) (338,40)
                        lvalue expression {foldable} [integer] (cv=) (338,40)
                          identifier "i" [integer] (cv=) (338,40)
                        constant expression [integer] (cv=integer constant: 2) (338,43)
                          integer constant: 2 [integer] (cv=integer constant: 2) (338,43)
                      constant expression [integer] (cv=integer constant: 1) (338,47)
                        integer constant: 1 [integer] (cv=integer constant: 1) (338,47)
                  lvalue expression {foldable} [integer] (cv=) (338,53)
                    identifier "bump" [integer] (cv=) (338,53)
                statement [none] (cv=) (339,13)
                  binary expression: '=' [integer] (cv=) (339,13)
                    lvalue expression {foldable} [integer] (cv=) (339,13)
                      identifier "multiplefaces" [integer] (cv=) (339,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (339,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (339,29)
                null [none] (cv=) (338,9)
              if [none] (cv=) (341,9)
                binary expression: '!=' [integer] (cv=) (341,13)
                  function call [integer] (cv=) (341,13)
                    identifier "llList2Integer" [integer] (cv=) (341,13)
                    lvalue expression {foldable} [list] (cv=) (341,28)
                      identifier "bump_shiny" [list] (cv=) (341,28)
                    binary expression: '*' [integer] (cv=) (341,40)
                      lvalue expression {foldable} [integer] (cv=) (341,40)
                        identifier "i" [integer] (cv=) (341,40)
                      constant expression [integer] (cv=integer constant: 2) (341,43)
                        integer constant: 2 [integer] (cv=integer constant: 2) (341,43)
                  lvalue expression {foldable} [integer] (cv=) (341,49)
                    identifier "shiny" [integer] (cv=) (341,49)
                statement [none] (cv=) (342,13)
                  binary expression: '=' [integer] (cv=) (342,13)
                    lvalue expression {foldable} [integer] (cv=) (342,13)
                      identifier "multiplefaces" [integer] (cv=) (342,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (342,29)
                      identifier "TRUE" [integer] (cv=integer constant: 1) (342,29)
                null [none] (cv=) (341,9)
          if [none] (cv=) (344,5)
            unary expression: '!' [integer] (cv=) (344,8)
              lvalue expression {foldable} [integer] (cv=) (344,9)
                identifier "multiplefaces" [integer] (cv=) (344,9)
            compound statement [none] (cv=) (345,5)
              statement [none] (cv=) (346,9)
                binary expression: '=' [integer] (cv=) (346,9)
                  lvalue expression {foldable} [integer] (cv=) (346,9)
                    identifier "mode" [integer] (cv=) (346,9)
                  binary expression: '|' [integer] (cv=) (346,16)
                    lvalue expression {foldable} [integer] (cv=) (346,16)
                      identifier "mode" [integer] (cv=) (346,16)
                    constant expression [integer] (cv=integer constant: 1) (346,23)
                      integer constant: 1 [integer] (cv=integer constant: 1) (346,23)
              statement [none] (cv=) (347,3)
                binary expression: '=' [integer] (cv=) (347,3)
                  lvalue expression {foldable} [integer] (cv=) (347,3)
                    identifier "cface" [integer] (cv=) (347,3)
                  lvalue expression {foldable} [integer] (cv=integer constant: -1) (347,11)
                    identifier "ALL_SIDES" [integer] (cv=integer constant: -1) (347,11)
            compound statement [none] (cv=) (348,12)
              statement [none] (cv=) (349,9)
                binary expression: '=' [integer] (cv=) (349,9)
                  lvalue expression {foldable} [integer] (cv=) (349,9)
                    identifier "cface" [integer] (cv=) (349,9)
                  constant expression [integer] (cv=integer constant: 0) (349,17)
                    integer constant: 0 [integer] (cv=integer constant: 0) (349,17)
          statement [none] (cv=) (352,5)
            function call [none] (cv=) (352,5)
              identifier "theFace" [none] (cv=) (352,5)
              constant expression [integer] (cv=integer constant: 0) (352,13)
                integer constant: 0 [integer] (cv=integer constant: 0) (352,13)
    global storage [none] (cv=) (355,1)
      null [none] (cv=) (355,1)
      global func [none] (cv=) (355,1)
        identifier "checkPrim" [none] (cv=) (355,1)
        null [none] (cv=) (355,1)
        compound statement [none] (cv=) (356,1)
          declaration [none] (cv=) (357,5)
            identifier "type" [list] (cv=) (357,10)
            function call [list] (cv=) (357,17)
              identifier "llGetPrimitiveParams" [list] (cv=) (357,17)
              list expression [list] (cv=list constant: 1 entries) (357,38)
                lvalue expression {foldable} [integer] (cv=integer constant: 9) (357,39)
                  identifier "PRIM_TYPE" [integer] (cv=integer constant: 9) (357,39)
          if [none] (cv=) (359,5)
            binary expression: '==' [integer] (cv=) (359,9)
              function call [integer] (cv=) (359,9)
                identifier "llList2Integer" [integer] (cv=) (359,9)
                lvalue expression {foldable} [list] (cv=) (359,24)
                  identifier "type" [list] (cv=) (359,24)
                constant expression [integer] (cv=integer constant: 0) (359,30)
                  integer constant: 0 [integer] (cv=integer constant: 0) (359,30)
              constant expression [integer] (cv=integer constant: 0) (359,36)
                integer constant: 0 [integer] (cv=integer constant: 0) (359,36)
            compound statement [none] (cv=) (360,5)
              if [none] (cv=) (361,9)
                binary expression: '==' [integer] (cv=) (361,13)
                  function call [integer] (cv=) (361,13)
                    identifier "llList2Integer" [integer] (cv=) (361,13)
                    lvalue expression {foldable} [list] (cv=) (361,28)
                      identifier "type" [list] (cv=) (361,28)
                    constant expression [integer] (cv=integer constant: 1) (361,34)
                      integer constant: 1 [integer] (cv=integer constant: 1) (361,34)
                  constant expression [integer] (cv=integer constant: 0) (361,40)
                    integer constant: 0 [integer] (cv=integer constant: 0) (361,40)
                compound statement [none] (cv=) (362,9)
                  if [none] (cv=) (363,13)
                    binary expression: '==' [integer] (cv=) (363,17)
                      function call [vector] (cv=) (363,17)
                        identifier "llList2Vector" [vector] (cv=) (363,17)
                        lvalue expression {foldable} [list] (cv=) (363,31)
                          identifier "type" [list] (cv=) (363,31)
                        constant expression [integer] (cv=integer constant: 2) (363,37)
                          integer constant: 2 [integer] (cv=integer constant: 2) (363,37)
                      vector expression [vector] (cv=vector constant: <0, 1, 0>) (363,43)
                        constant expression [float] (cv=float constant: 0.000000) (363,44)
                          float constant: 0.000000 [float] (cv=float constant: 0.000000) (363,44)
                        constant expression [float] (cv=float constant: 1.000000) (363,49)
                          float constant: 1.000000 [float] (cv=float constant: 1.000000) (363,49)
                        constant expression [float] (cv=float constant: 0.000000) (363,54)
                          float constant: 0.000000 [float] (cv=float constant: 0.000000) (363,54)
                    compound statement [none] (cv=) (364,13)
                      if [none] (cv=) (365,17)
                        binary expression: '==' [integer] (cv=) (365,21)
                          function call [float] (cv=) (365,21)
                            identifier "llList2Float" [float] (cv=) (365,21)
                            lvalue expression {foldable} [list] (cv=) (365,34)
                              identifier "type" [list] (cv=) (365,34)
                            constant expression [integer] (cv=integer constant: 3) (365,40)
                              integer constant: 3 [integer] (cv=integer constant: 3) (365,40)
                          constant expression [float] (cv=float constant: 0.000000) (365,46)
                            float constant: 0.000000 [float] (cv=float constant: 0.000000) (365,46)
                        compound statement [none] (cv=) (366,17)
                          if [none] (cv=) (367,21)
                            binary expression: '==' [integer] (cv=) (367,25)
                              function call [vector] (cv=) (367,25)
                                identifier "llList2Vector" [vector] (cv=) (367,25)
                                lvalue expression {foldable} [list] (cv=) (367,39)
                                  identifier "type" [list] (cv=) (367,39)
                                constant expression [integer] (cv=integer constant: 4) (367,45)
                                  integer constant: 4 [integer] (cv=integer constant: 4) (367,45)
                              lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (367,51)
                                identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (367,51)
                            compound statement [none] (cv=) (368,21)
                              if [none] (cv=) (369,25)
                                binary expression: '==' [integer] (cv=) (369,29)
                                  function call [vector] (cv=) (369,29)
                                    identifier "llList2Vector" [vector] (cv=) (369,29)
                                    lvalue expression {foldable} [list] (cv=) (369,43)
                                      identifier "type" [list] (cv=) (369,43)
                                    constant expression [integer] (cv=integer constant: 5) (369,49)
                                      integer constant: 5 [integer] (cv=integer constant: 5) (369,49)
                                  vector expression [vector] (cv=vector constant: <1, 1, 0>) (369,55)
                                    constant expression [float] (cv=float constant: 1.000000) (369,56)
                                      float constant: 1.000000 [float] (cv=float constant: 1.000000) (369,56)
                                    constant expression [float] (cv=float constant: 1.000000) (369,61)
                                      float constant: 1.000000 [float] (cv=float constant: 1.000000) (369,61)
                                    constant expression [float] (cv=float constant: 0.000000) (369,66)
                                      float constant: 0.000000 [float] (cv=float constant: 0.000000) (369,66)
                                compound statement [none] (cv=) (370,25)
                                  if [none] (cv=) (371,29)
                                    binary expression: '==' [integer] (cv=) (371,33)
                                      function call [vector] (cv=) (371,33)
                                        identifier "llList2Vector" [vector] (cv=) (371,33)
                                        lvalue expression {foldable} [list] (cv=) (371,47)
                                          identifier "type" [list] (cv=) (371,47)
                                        constant expression [integer] (cv=integer constant: 6) (371,53)
                                          integer constant: 6 [integer] (cv=integer constant: 6) (371,53)
                                      lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (371,59)
                                        identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (371,59)
                                    compound statement [none] (cv=) (372,29)
                                      return [none] (cv=) (373,33)
                                        null [none] (cv=) (373,33)
                                    null [none] (cv=) (371,29)
                                null [none] (cv=) (369,25)
                            null [none] (cv=) (367,21)
                        null [none] (cv=) (365,17)
                    null [none] (cv=) (363,13)
                null [none] (cv=) (361,9)
            null [none] (cv=) (359,5)
          statement [none] (cv=) (381,5)
            function call [none] (cv=) (381,5)
              identifier "add" [none] (cv=) (381,5)
              function call [list] (cv=) (381,9)
                identifier "lis" [list] (cv=) (381,9)
                lvalue expression {foldable} [list] (cv=) (381,13)
                  identifier "type" [list] (cv=) (381,13)
              constant expression [integer] (cv=integer constant: 67108864) (381,20)
                integer constant: 67108864 [integer] (cv=integer constant: 67108864) (381,20)
    global storage [none] (cv=) (384,1)
      global var [none] (cv=) (384,1)
        identifier "sep" [string] (cv=) (384,8)
        null [none] (cv=) (384,1)
      null [none] (cv=) (384,1)
    global storage [none] (cv=) (386,1)
      global var [none] (cv=) (386,1)
        identifier "mode" [integer] (cv=) (386,9)
        null [none] (cv=) (386,1)
      null [none] (cv=) (386,1)
    global storage [none] (cv=) (388,1)
      global var [none] (cv=) (388,1)
        identifier "cface" [integer] (cv=) (388,9)
        null [none] (cv=) (388,1)
      null [none] (cv=) (388,1)
    global storage [none] (cv=) (389,1)
      global var [none] (cv=) (389,1)
        identifier "multiplefaces" [integer] (cv=) (389,9)
        null [none] (cv=) (389,1)
      null [none] (cv=) (389,1)
    global storage [none] (cv=) (391,1)
      global var [none] (cv=) (391,1)
        identifier "params" [list] (cv=) (391,6)
        null [none] (cv=) (391,1)
      null [none] (cv=) (391,1)
    global storage [none] (cv=) (392,1)
      global var [none] (cv=) (392,1)
        identifier "header" [list] (cv=) (392,6)
        null [none] (cv=) (392,1)
      null [none] (cv=) (392,1)
    global storage [none] (cv=) (394,1)
      global var [none] (cv=) (394,1)
        identifier "recycle_mask" [integer] (cv=) (394,9)
        null [none] (cv=) (394,1)
      null [none] (cv=) (394,1)
    global storage [none] (cv=) (396,1)
      global var [none] (cv=) (396,1)
        identifier "commands" [list] (cv=) (396,6)
        null [none] (cv=) (396,1)
      null [none] (cv=) (396,1)
    global storage [none] (cv=) (398,1)
      global var [none] (cv=) (398,1)
        identifier "hexc" [string] (cv=string constant: "0123456789ABCDEF") (398,8)
        constant expression [string] (cv=string constant: "0123456789ABCDEF") (398,13)
          string constant: "0123456789ABCDEF" [string] (cv=string constant: "0123456789ABCDEF") (398,13)
      null [none] (cv=) (398,1)
  ast node list [none] (cv=) (11,1)
    state [none] (cv=) (400,1)
      null [none] (cv=) (400,1)
      event handler [none] (cv=) (402,5)
        identifier "state_entry" [none] (cv=) (402,5)
        null [none] (cv=) (402,5)
        compound statement [none] (cv=) (403,5)
          statement [none] (cv=) (404,9)
            function call [none] (cv=) (404,9)
              identifier "llSetText" [none] (cv=) (404,9)
              function call [string] (cv=) (404,19)
                identifier "Unescape" [string] (cv=) (404,19)
                lvalue expression {foldable} [string] (cv=string constant: "") (404,28)
                  identifier "llSetText_text" [string] (cv=string constant: "") (404,28)
              lvalue expression {foldable} [vector] (cv=vector constant: <1, 1, 1>) (404,45)
                identifier "llSetText_color" [vector] (cv=vector constant: <1, 1, 1>) (404,45)
              lvalue expression {foldable} [float] (cv=float constant: 1.000000) (404,62)
                identifier "llSetText_alpha" [float] (cv=float constant: 1.000000) (404,62)
          statement [none] (cv=) (405,9)
            function call [none] (cv=) (405,9)
              identifier "llTargetOmega" [none] (cv=) (405,9)
              lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (405,23)
                identifier "llTargetOmega_axis" [vector] (cv=vector constant: <0, 0, 0>) (405,23)
              lvalue expression {foldable} [float] (cv=float constant: 0.000000) (405,43)
                identifier "llTargetOmega_spinrate" [float] (cv=float constant: 0.000000) (405,43)
              lvalue expression {foldable} [float] (cv=float constant: 0.000000) (405,67)
                identifier "llTargetOmega_gain" [float] (cv=float constant: 0.000000) (405,67)
          statement [none] (cv=) (406,9)
            function call [none] (cv=) (406,9)
              identifier "llParticleSystem" [none] (cv=) (406,9)
              lvalue expression {foldable} [list] (cv=) (406,26)
                identifier "llParticleSystem_list" [list] (cv=list constant: 0 entries) (406,26)
          statement [none] (cv=) (407,9)
            function call [none] (cv=) (407,9)
              identifier "llSetTextureAnim" [none] (cv=) (407,9)
              lvalue expression {foldable} [integer] (cv=integer constant: 0) (407,26)
                identifier "llSetTextureAnim_mode" [integer] (cv=integer constant: 0) (407,26)
              lvalue expression {foldable} [integer] (cv=integer constant: -1) (407,49)
                identifier "llSetTextureAnim_face" [integer] (cv=integer constant: -1) (407,49)
              lvalue expression {foldable} [integer] (cv=integer constant: 2) (407,72)
                identifier "llSetTextureAnim_x_frames" [integer] (cv=integer constant: 2) (407,72)
              lvalue expression {foldable} [integer] (cv=integer constant: 2) (407,99)
                identifier "llSetTextureAnim_y_frames" [integer] (cv=integer constant: 2) (407,99)
              lvalue expression {foldable} [float] (cv=integer constant: 0) (408,33)
                identifier "llSetTextureAnim_start_frame" [float] (cv=integer constant: 0) (408,33)
              lvalue expression {foldable} [float] (cv=integer constant: 3) (408,62)
                identifier "llSetTextureAnim_end_frame" [float] (cv=integer constant: 3) (408,62)
              lvalue expression {foldable} [float] (cv=float constant: 0.100000) (408,89)
                identifier "llSetTextureAnim_rate" [float] (cv=float constant: 0.100000) (408,89)
          statement [none] (cv=) (410,9)
            function call [none] (cv=) (410,9)
              identifier "llOwnerSay" [none] (cv=) (410,9)
              constant expression [string] (cv=string constant: "--------------------------------------") (410,20)
                string constant: "--------------------------------------" [string] (cv=string constant: "--------------------------------------") (410,20)
          statement [none] (cv=) (412,9)
            binary expression: '=' [string] (cv=) (412,9)
              lvalue expression {foldable} [string] (cv=) (412,9)
                identifier "sep" [string] (cv=) (412,9)
              function call [string] (cv=) (412,15)
                identifier "llUnescapeURL" [string] (cv=) (412,15)
                constant expression [string] (cv=string constant: "%01") (412,29)
                  string constant: "%01" [string] (cv=string constant: "%01") (412,29)
          if [none] (cv=) (415,9)
            binary expression: '!=' [integer] (cv=) (415,12)
              parenthesis expression [integer] (cv=) (415,12)
                binary expression: '&' [integer] (cv=) (415,13)
                  function call [integer] (cv=) (415,13)
                    identifier "llGetObjectPermMask" [integer] (cv=) (415,13)
                    lvalue expression {foldable} [integer] (cv=integer constant: 1) (415,33)
                      identifier "MASK_OWNER" [integer] (cv=integer constant: 1) (415,33)
                  constant expression [integer] (cv=integer constant: 57344) (415,47)
                    integer constant: 57344 [integer] (cv=integer constant: 57344) (415,47)
              constant expression [integer] (cv=integer constant: 57344) (415,62)
                integer constant: 57344 [integer] (cv=integer constant: 57344) (415,62)
            compound statement [none] (cv=) (416,9)
              statement [none] (cv=) (420,13)
                function call [none] (cv=) (420,13)
                  identifier "llOwnerSay" [none] (cv=) (420,13)
                  constant expression [string] (cv=string constant: "You cannot clone an object you do not have full permission on") (420,24)
                    string constant: "You cannot clone an object you do not have full permission on" [string] (cv=string constant: "You cannot clone an object you do not have full permission on") (420,24)
              return [none] (cv=) (421,13)
                null [none] (cv=) (421,13)
            null [none] (cv=) (415,9)
          statement [none] (cv=) (424,9)
            binary expression: '=' [list] (cv=) (424,9)
              lvalue expression {foldable} [list] (cv=) (424,9)
                identifier "header" [list] (cv=) (424,9)
              list expression [list] (cv=) (424,18)
                function call [integer] (cv=) (424,19)
                  identifier "llGetLinkNumber" [integer] (cv=) (424,19)
                lvalue expression {foldable} [string] (cv=string constant: "url") (424,38)
                  identifier "TLML_URL" [string] (cv=string constant: "url") (424,38)
          statement [none] (cv=) (426,9)
            binary expression: '=' [list] (cv=) (426,9)
              lvalue expression {foldable} [list] (cv=) (426,9)
                identifier "params" [list] (cv=) (426,9)
              list expression [list] (cv=) (426,18)
                lvalue expression {foldable} [string] (cv=) (426,19)
                  identifier "sep" [string] (cv=) (426,19)
          statement [none] (cv=) (428,3)
            function call [none] (cv=) (428,3)
              identifier "checkFaces" [none] (cv=) (428,3)
          statement [none] (cv=) (430,3)
            function call [none] (cv=) (430,3)
              identifier "add" [none] (cv=) (430,3)
              list expression [list] (cv=) (430,7)
                function call [string] (cv=) (430,8)
                  identifier "vec" [string] (cv=) (430,8)
                  function call [vector] (cv=) (430,12)
                    identifier "llGetScale" [vector] (cv=) (430,12)
              constant expression [integer] (cv=integer constant: 131072) (430,28)
                integer constant: 131072 [integer] (cv=integer constant: 131072) (430,28)
          if [none] (cv=) (431,3)
            binary expression: '>=' [integer] (cv=) (431,7)
              function call [integer] (cv=) (431,7)
                identifier "llGetLinkNumber" [integer] (cv=) (431,7)
              constant expression [integer] (cv=integer constant: 2) (431,28)
                integer constant: 2 [integer] (cv=integer constant: 2) (431,28)
            statement [none] (cv=) (432,4)
              function call [none] (cv=) (432,4)
                identifier "add" [none] (cv=) (432,4)
                list expression [list] (cv=) (432,8)
                  function call [string] (cv=) (432,9)
                    identifier "vec" [string] (cv=) (432,9)
                    function call [vector] (cv=) (432,13)
                      identifier "llGetLocalPos" [vector] (cv=) (432,13)
                constant expression [integer] (cv=integer constant: 262144) (432,32)
                  integer constant: 262144 [integer] (cv=integer constant: 262144) (432,32)
            null [none] (cv=) (431,3)
          declaration [none] (cv=) (434,3)
            identifier "local" [quaternion] (cv=) (434,12)
            function call [quaternion] (cv=) (434,20)
              identifier "llGetLocalRot" [quaternion] (cv=) (434,20)
          if [none] (cv=) (435,3)
            binary expression: '!=' [integer] (cv=) (435,7)
              lvalue expression {foldable} [quaternion] (cv=) (435,7)
                identifier "local" [quaternion] (cv=) (435,7)
              lvalue expression {foldable} [quaternion] (cv=quaternion constant: <0, 0, 0, 1>) (435,16)
                identifier "ZERO_ROTATION" [quaternion] (cv=quaternion constant: <0, 0, 0, 1>) (435,16)
            statement [none] (cv=) (436,4)
              function call [none] (cv=) (436,4)
                identifier "add" [none] (cv=) (436,4)
                list expression [list] (cv=) (436,8)
                  function call [string] (cv=) (436,9)
                    identifier "rot" [string] (cv=) (436,9)
                    function call [quaternion] (cv=) (436,13)
                      identifier "llGetLocalRot" [quaternion] (cv=) (436,13)
                constant expression [integer] (cv=integer constant: 1048576) (436,32)
                  integer constant: 1048576 [integer] (cv=integer constant: 1048576) (436,32)
            null [none] (cv=) (435,3)
          if [none] (cv=) (439,3)
            binary expression: '!=' [integer] (cv=integer constant: 0) (439,6)
              lvalue expression {foldable} [string] (cv=string constant: "") (439,6)
                identifier "llSetText_text" [string] (cv=string constant: "") (439,6)
              constant expression [string] (cv=string constant: "") (439,24)
                string constant: "" [string] (cv=string constant: "") (439,24)
            statement [none] (cv=) (440,4)
              function call [none] (cv=) (440,4)
                identifier "add" [none] (cv=) (440,4)
                list expression [list] (cv=list constant: 1 entries) (440,8)
                  lvalue expression {foldable} [string] (cv=string constant: "") (440,9)
                    identifier "llSetText_text" [string] (cv=string constant: "") (440,9)
                constant expression [integer] (cv=integer constant: 8388608) (440,26)
                  integer constant: 8388608 [integer] (cv=integer constant: 8388608) (440,26)
            null [none] (cv=) (439,3)
          if [none] (cv=) (441,3)
            binary expression: '||' [integer] (cv=integer constant: 0) (441,6)
              binary expression: '!=' [integer] (cv=integer constant: 0) (441,6)
                lvalue expression {foldable} [vector] (cv=vector constant: <1, 1, 1>) (441,6)
                  identifier "llSetText_color" [vector] (cv=vector constant: <1, 1, 1>) (441,6)
                vector expression [vector] (cv=vector constant: <1, 1, 1>) (441,25)
                  constant expression [float] (cv=float constant: 1.000000) (441,26)
                    float constant: 1.000000 [float] (cv=float constant: 1.000000) (441,26)
                  constant expression [float] (cv=float constant: 1.000000) (441,30)
                    float constant: 1.000000 [float] (cv=float constant: 1.000000) (441,30)
                  constant expression [float] (cv=float constant: 1.000000) (441,34)
                    float constant: 1.000000 [float] (cv=float constant: 1.000000) (441,34)
              binary expression: '!=' [integer] (cv=integer constant: 0) (441,42)
                lvalue expression {foldable} [float] (cv=float constant: 1.000000) (441,42)
                  identifier "llSetText_alpha" [float] (cv=float constant: 1.000000) (441,42)
                constant expression [float] (cv=float constant: 1.000000) (441,61)
                  float constant: 1.000000 [float] (cv=float constant: 1.000000) (441,61)
            statement [none] (cv=) (442,4)
              function call [none] (cv=) (442,4)
                identifier "add" [none] (cv=) (442,4)
                list expression [list] (cv=) (442,8)
                  function call [string] (cv=) (442,9)
                    identifier "vec" [string] (cv=) (442,9)
                    lvalue expression {foldable} [vector] (cv=vector constant: <1, 1, 1>) (442,13)
                      identifier "llSetText_color" [vector] (cv=vector constant: <1, 1, 1>) (442,13)
                  function call [string] (cv=) (442,30)
                    identifier "flo" [string] (cv=) (442,30)
                    lvalue expression {foldable} [float] (cv=float constant: 1.000000) (442,34)
                      identifier "llSetText_alpha" [float] (cv=float constant: 1.000000) (442,34)
                constant expression [integer] (cv=integer constant: 16777216) (442,53)
                  integer constant: 16777216 [integer] (cv=integer constant: 16777216) (442,53)
            null [none] (cv=) (441,3)
          if [none] (cv=) (444,3)
            binary expression: '||' [integer] (cv=integer constant: 0) (444,6)
              binary expression: '!=' [integer] (cv=integer constant: 0) (444,6)
                lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (444,6)
                  identifier "llTargetOmega_axis" [vector] (cv=vector constant: <0, 0, 0>) (444,6)
                lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (444,28)
                  identifier "ZERO_VECTOR" [vector] (cv=vector constant: <0, 0, 0>) (444,28)
              binary expression: '|' [integer] (cv=integer constant: 0) (444,43)
                binary expression: '!=' [integer] (cv=integer constant: 0) (444,43)
                  lvalue expression {foldable} [float] (cv=float constant: 0.000000) (444,43)
                    identifier "llTargetOmega_spinrate" [float] (cv=float constant: 0.000000) (444,43)
                  constant expression [float] (cv=float constant: 0.000000) (444,69)
                    float constant: 0.000000 [float] (cv=float constant: 0.000000) (444,69)
                binary expression: '!=' [integer] (cv=integer constant: 0) (444,75)
                  lvalue expression {foldable} [float] (cv=float constant: 0.000000) (444,75)
                    identifier "llTargetOmega_gain" [float] (cv=float constant: 0.000000) (444,75)
                  constant expression [float] (cv=float constant: 0.000000) (444,97)
                    float constant: 0.000000 [float] (cv=float constant: 0.000000) (444,97)
            statement [none] (cv=) (445,4)
              function call [none] (cv=) (445,4)
                identifier "add" [none] (cv=) (445,4)
                list expression [list] (cv=) (445,8)
                  function call [string] (cv=) (445,9)
                    identifier "vec" [string] (cv=) (445,9)
                    lvalue expression {foldable} [vector] (cv=vector constant: <0, 0, 0>) (445,13)
                      identifier "llTargetOmega_axis" [vector] (cv=vector constant: <0, 0, 0>) (445,13)
                  function call [string] (cv=) (445,33)
                    identifier "flo" [string] (cv=) (445,33)
                    lvalue expression {foldable} [float] (cv=float constant: 0.000000) (445,37)
                      identifier "llTargetOmega_spinrate" [float] (cv=float constant: 0.000000) (445,37)
                  function call [string] (cv=) (445,63)
                    identifier "flo" [string] (cv=) (445,63)
                    lvalue expression {foldable} [float] (cv=float constant: 0.000000) (445,67)
                      identifier "llTargetOmega_gain" [float] (cv=float constant: 0.000000) (445,67)
                constant expression [integer] (cv=integer constant: 33554432) (445,89)
                  integer constant: 33554432 [integer] (cv=integer constant: 33554432) (445,89)
            null [none] (cv=) (444,3)
          statement [none] (cv=) (447,3)
            function call [none] (cv=) (447,3)
              identifier "checkPrim" [none] (cv=) (447,3)
          if [none] (cv=) (449,3)
            binary expression: '!=' [integer] (cv=integer constant: 0) (449,6)
              lvalue expression {foldable} [list] (cv=list constant: 0 entries) (449,6)
                identifier "llParticleSystem_list" [list] (cv=list constant: 0 entries) (449,6)
              list expression [list] (cv=list constant: 0 entries) (449,31)
                null [none] (cv=) (449,31)
            statement [none] (cv=) (450,4)
              function call [none] (cv=) (450,4)
                identifier "add" [none] (cv=) (450,4)
                list expression [list] (cv=) (450,8)
                  function call [string] (cv=) (450,9)
                    identifier "TightListDump" [string] (cv=) (450,9)
                    function call [list] (cv=) (450,23)
                      identifier "lis" [list] (cv=) (450,23)
                      lvalue expression {foldable} [list] (cv=) (450,27)
                        identifier "llParticleSystem_list" [list] (cv=list constant: 0 entries) (450,27)
                    constant expression [string] (cv=string constant: "*") (450,50)
                      string constant: "*" [string] (cv=string constant: "*") (450,50)
                constant expression [integer] (cv=integer constant: 268435456) (450,57)
                  integer constant: 268435456 [integer] (cv=integer constant: 268435456) (450,57)
            null [none] (cv=) (449,3)
          declaration [none] (cv=) (452,9)
            identifier "t" [integer] (cv=) (452,17)
            null [none] (cv=) (452,9)
          if [none] (cv=) (453,9)
            lvalue expression {foldable} [integer] (cv=) (453,12)
              identifier "multiplefaces" [integer] (cv=) (453,12)
            compound statement [none] (cv=) (454,9)
              statement [none] (cv=) (455,13)
                binary expression: '=' [integer] (cv=) (455,13)
                  lvalue expression {foldable} [integer] (cv=) (455,13)
                    identifier "t" [integer] (cv=) (455,13)
                  function call [integer] (cv=) (455,17)
                    identifier "llGetNumberOfSides" [integer] (cv=) (455,17)
              statement [none] (cv=) (456,4)
                binary expression: '=' [integer] (cv=) (456,4)
                  lvalue expression {foldable} [integer] (cv=) (456,4)
                    identifier "cface" [integer] (cv=) (456,4)
                  constant expression [integer] (cv=integer constant: 1) (456,12)
                    integer constant: 1 [integer] (cv=integer constant: 1) (456,12)
              while [none] (cv=) (457,13)
                binary expression: '<' [integer] (cv=) (457,19)
                  lvalue expression {foldable} [integer] (cv=) (457,19)
                    identifier "cface" [integer] (cv=) (457,19)
                  lvalue expression {foldable} [integer] (cv=) (457,27)
                    identifier "t" [integer] (cv=) (457,27)
                compound statement [none] (cv=) (458,13)
                  statement [none] (cv=) (459,5)
                    function call [none] (cv=) (459,5)
                      identifier "break" [none] (cv=) (459,5)
                  statement [none] (cv=) (460,5)
                    function call [none] (cv=) (460,5)
                      identifier "theFace" [none] (cv=) (460,5)
                      lvalue expression {foldable} [integer] (cv=) (460,13)
                        identifier "cface" [integer] (cv=) (460,13)
                  statement [none] (cv=) (461,5)
                    unary expression: '++ (pre)' [integer] (cv=) (461,5)
                      lvalue expression {foldable} [integer] (cv=) (461,7)
                        identifier "cface" [integer] (cv=) (461,7)
            null [none] (cv=) (453,9)
          if [none] (cv=) (464,3)
            lvalue expression {foldable} [integer] (cv=integer constant: 0) (464,6)
              identifier "llSetTextureAnim_mode" [integer] (cv=integer constant: 0) (464,6)
            compound statement [none] (cv=) (465,3)
              statement [none] (cv=) (466,4)
                function call [none] (cv=) (466,4)
                  identifier "break" [none] (cv=) (466,4)
              statement [none] (cv=) (467,4)
                function call [none] (cv=) (467,4)
                  identifier "add" [none] (cv=) (467,4)
                  list expression [list] (cv=list constant: 7 entries) (467,8)
                    lvalue expression {foldable} [integer] (cv=integer constant: -1) (467,9)
                      identifier "llSetTextureAnim_face" [integer] (cv=integer constant: -1) (467,9)
                    lvalue expression {foldable} [integer] (cv=integer constant: 0) (467,32)
                      identifier "llSetTextureAnim_mode" [integer] (cv=integer constant: 0) (467,32)
                    lvalue expression {foldable} [integer] (cv=integer constant: 2) (467,55)
                      identifier "llSetTextureAnim_x_frames" [integer] (cv=integer constant: 2) (467,55)
                    lvalue expression {foldable} [integer] (cv=integer constant: 2) (467,82)
                      identifier "llSetTextureAnim_y_frames" [integer] (cv=integer constant: 2) (467,82)
                    lvalue expression {foldable} [float] (cv=integer constant: 0) (468,6)
                      identifier "llSetTextureAnim_start_frame" [float] (cv=integer constant: 0) (468,6)
                    lvalue expression {foldable} [float] (cv=integer constant: 3) (468,35)
                      identifier "llSetTextureAnim_end_frame" [float] (cv=integer constant: 3) (468,35)
                    lvalue expression {foldable} [float] (cv=float constant: 0.100000) (468,62)
                      identifier "llSetTextureAnim_rate" [float] (cv=float constant: 0.100000) (468,62)
                  constant expression [integer] (cv=integer constant: 2097408) (468,86)
                    integer constant: 2097408 [integer] (cv=integer constant: 2097408) (468,86)
            null [none] (cv=) (464,3)
          statement [none] (cv=) (470,3)
            function call [none] (cv=) (470,3)
              identifier "store" [none] (cv=) (470,3)
          statement [none] (cv=) (471,9)
            binary expression: '=' [integer] (cv=) (471,9)
              lvalue expression {foldable} [integer] (cv=) (471,9)
                identifier "t" [integer] (cv=) (471,9)
              function call [integer] (cv=) (471,13)
                identifier "llGetListLength" [integer] (cv=) (471,13)
                lvalue expression {foldable} [list] (cv=) (471,29)
                  identifier "commands" [list] (cv=) (471,29)
          declaration [none] (cv=) (473,9)
            identifier "c" [integer] (cv=) (473,17)
            null [none] (cv=) (473,9)
          declaration [none] (cv=) (474,9)
            identifier "d" [string] (cv=) (474,16)
            null [none] (cv=) (474,9)
          declaration [none] (cv=) (475,9)
            identifier "e" [string] (cv=) (475,16)
            null [none] (cv=) (475,9)
          declaration [none] (cv=) (476,9)
            identifier "f" [string] (cv=) (476,16)
            null [none] (cv=) (476,9)
          if [none] (cv=) (477,9)
            binary expression: '>' [integer] (cv=) (477,12)
              lvalue expression {foldable} [integer] (cv=) (477,12)
                identifier "t" [integer] (cv=) (477,12)
              constant expression [integer] (cv=integer constant: 1) (477,16)
                integer constant: 1 [integer] (cv=integer constant: 1) (477,16)
            statement [none] (cv=) (478,13)
              binary expression: '=' [string] (cv=) (478,13)
                lvalue expression {foldable} [string] (cv=) (478,13)
                  identifier "d" [string] (cv=) (478,13)
                function call [string] (cv=) (478,17)
                  identifier "hex" [string] (cv=) (478,17)
                  lvalue expression {foldable} [integer] (cv=) (478,21)
                    identifier "recycle_mask" [integer] (cv=) (478,21)
            null [none] (cv=) (477,9)
          while [none] (cv=) (481,9)
            binary expression: '<' [integer] (cv=) (481,15)
              lvalue expression {foldable} [integer] (cv=) (481,15)
                identifier "c" [integer] (cv=) (481,15)
              lvalue expression {foldable} [integer] (cv=) (481,19)
                identifier "t" [integer] (cv=) (481,19)
            compound statement [none] (cv=) (482,9)
              statement [none] (cv=) (483,13)
                binary expression: '=' [string] (cv=) (483,13)
                  lvalue expression {foldable} [string] (cv=) (483,13)
                    identifier "e" [string] (cv=) (483,13)
                  function call [string] (cv=) (483,17)
                    identifier "llDumpList2String" [string] (cv=) (483,17)
                    function call [list] (cv=) (483,35)
                      identifier "llParseString2List" [list] (cv=) (483,35)
                      function call [string] (cv=) (483,54)
                        identifier "llList2String" [string] (cv=) (483,54)
                        lvalue expression {foldable} [list] (cv=) (483,70)
                          identifier "commands" [list] (cv=) (483,70)
                        lvalue expression {foldable} [integer] (cv=) (483,79)
                          identifier "c" [integer] (cv=) (483,79)
                      list expression [list] (cv=) (483,82)
                        lvalue expression {foldable} [string] (cv=) (483,83)
                          identifier "sep" [string] (cv=) (483,83)
                      list expression [list] (cv=list constant: 0 entries) (483,88)
                        null [none] (cv=) (483,88)
                    lvalue expression {foldable} [string] (cv=) (483,92)
                      identifier "d" [string] (cv=) (483,92)
              statement [none] (cv=) (484,13)
                binary expression: '=' [string] (cv=) (484,13)
                  lvalue expression {foldable} [string] (cv=) (484,13)
                    identifier "f" [string] (cv=) (484,13)
                  function call [string] (cv=) (484,17)
                    identifier "TightListDump" [string] (cv=) (484,17)
                    lvalue expression {foldable} [list] (cv=) (484,31)
                      identifier "header" [list] (cv=) (484,31)
                    function call [string] (cv=) (484,38)
                      identifier "llGetSubString" [string] (cv=) (484,38)
                      lvalue expression {foldable} [string] (cv=) (484,53)
                        identifier "e" [string] (cv=) (484,53)
                      constant expression [integer] (cv=integer constant: 0) (484,55)
                        integer constant: 0 [integer] (cv=integer constant: 0) (484,55)
                      constant expression [integer] (cv=integer constant: 0) (484,57)
                        integer constant: 0 [integer] (cv=integer constant: 0) (484,57)
              statement [none] (cv=) (485,13)
                function call [none] (cv=) (485,13)
                  identifier "llOwnerSay" [none] (cv=) (485,13)
                  binary expression: '+' [string] (cv=) (485,24)
                    binary expression: '+' [string] (cv=) (485,24)
                      constant expression [string] (cv=string constant: "T") (485,24)
                        string constant: "T" [string] (cv=string constant: "T") (485,24)
                      lvalue expression {foldable} [string] (cv=) (485,28)
                        identifier "f" [string] (cv=) (485,28)
                    lvalue expression {foldable} [string] (cv=) (485,30)
                      identifier "e" [string] (cv=) (485,30)
              if [none] (cv=) (486,13)
                binary expression: '==' [integer] (cv=) (486,16)
                  unary expression: '++ (pre)' [integer] (cv=) (486,16)
                    lvalue expression {foldable} [integer] (cv=) (486,18)
                      identifier "c" [integer] (cv=) (486,18)
                  constant expression [integer] (cv=integer constant: 1) (486,23)
                    integer constant: 1 [integer] (cv=integer constant: 1) (486,23)
                statement [none] (cv=) (487,5)
                  binary expression: '=' [list] (cv=) (487,5)
                    lvalue expression {foldable} [list] (cv=) (487,5)
                      identifier "header" [list] (cv=) (487,5)
                    list expression [list] (cv=) (487,14)
                      function call [integer] (cv=) (487,15)
                        identifier "llGetLinkNumber" [integer] (cv=) (487,15)
                      constant expression [string] (cv=string constant: "") (487,34)
                        string constant: "" [string] (cv=string constant: "") (487,34)
                null [none] (cv=) (486,13)
